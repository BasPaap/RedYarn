<#@ include file="$(SolutionDir)common.t4" #>
using Bas.RedYarn.WebApp.ViewModels;
using Bas.RedYarn.WebApp.Services;
using System;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;

namespace Bas.RedYarn.WebApp.Tests.Services
{
    sealed class TestDataService : IDataService
    {
<#
foreach (var viewModelName in viewModelNames)
{#>
		public Collection<<#=viewModelName#>> <#=viewModelName#>s { get; set; } = new Collection<<#=viewModelName#>>();
<#}
#>

<#
foreach (var viewModelName in viewModelNames)
{#>
        public Task<<#=viewModelName#>> Get<#=viewModelName#>Async(Guid id)
        {
            return Task.FromResult(<#=viewModelName#>s.SingleOrDefault(d => d.Id == id));
        }

        public Task<<#=viewModelName#>> Create<#=viewModelName#>Async(<#=viewModelName#> <#=Decapitalize(viewModelName)#>)
        {
            <#=Decapitalize(viewModelName)#>.Id = Guid.NewGuid();
            <#=viewModelName#>s.Add(<#=Decapitalize(viewModelName)#>);

            return Task.FromResult(<#=Decapitalize(viewModelName)#>);
        }

        public Task<(<#=viewModelName#> result, bool isFound)> Update<#=viewModelName#>Async(Guid id, <#=viewModelName#> <#=Decapitalize(viewModelName)#>)
        {
            var existingViewModel = <#=viewModelName#>s.SingleOrDefault(d => d.Id == id);

			if (existingViewModel == null)
			{
				return Task.FromResult(((<#=viewModelName#>)null, false));
			}
						
            var indexOfViewModel = <#=viewModelName#>s.IndexOf(existingViewModel);
            existingViewModel = <#=Decapitalize(viewModelName)#>;
            existingViewModel.Id = id;
			<#=viewModelName#>s[indexOfViewModel] = existingViewModel;

            return Task.FromResult((existingViewModel, true));
        }

        public Task<bool> Delete<#=viewModelName#>Async(Guid id)
        {
            var existingViewModel = <#=viewModelName#>s.SingleOrDefault(d => d.Id == id);
			if (existingViewModel == null)
			{
				return Task.FromResult(false);
			}

			<#=viewModelName#>s.Remove(existingViewModel);
            return Task.FromResult(true);
        }
<#}
#>
    }
}