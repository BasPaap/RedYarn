<#@ include file="$(SolutionDir)common.t4" #>
<#
string GetIdProperties(string viewModelName)
{
	if (extraViewModelNames.Contains(viewModelName))
	{
		return "Guid fromNodeId, Guid toNodeId";		
	}
	else
	{
		return "Guid id";
	}
}
#>

<#
string GetPredicate(string viewModelName)
{
	if (extraViewModelNames.Contains(viewModelName))
	{
		return "d => d.FromNodeId == fromNodeId && d.ToNodeId == toNodeId";		
	}
	else
	{
		return "d => d.Id == id";
	}
}
#>

using Bas.RedYarn.WebApp.ViewModels;
using Bas.RedYarn.WebApp.Services;
using System;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;

namespace Bas.RedYarn.WebApp.Tests.Services
{
    sealed class TestDataService : IDataService
    {
<#
foreach (var viewModelName in viewModelNames)
{
#>
		public Collection<<#=viewModelName#>> <#=Pluralize(viewModelName)#> { get; set; } = new Collection<<#=viewModelName#>>();
<#
}
#>

<#
foreach (var viewModelName in viewModelNames)
{
#>
        public Task<<#=viewModelName#>> Get<#=viewModelName#>Async(<#=GetIdProperties(viewModelName)#>)
        {
            return Task.FromResult(<#=Pluralize(viewModelName)#>.SingleOrDefault(<#=GetPredicate(viewModelName)#>));
        }

        public Task<<#=viewModelName#>> Create<#=viewModelName#>Async(<# if (entitiesToAddToDiagram.Contains(GetModelName(viewModelName))) {#>Guid diagramId, <#}#><#=viewModelName#> <#=Decapitalize(viewModelName)#>)
        {
			<#=Decapitalize(viewModelName)#>.Id = Guid.NewGuid();
            <#=Pluralize(viewModelName)#>.Add(<#=Decapitalize(viewModelName)#>);

            return Task.FromResult(<#=Decapitalize(viewModelName)#>);
        }

        public Task<(<#=viewModelName#> result, bool isFound)> Update<#=viewModelName#>Async(<#=GetIdProperties(viewModelName)#>, <#=viewModelName#> <#=Decapitalize(viewModelName)#>)
        {
            var existingViewModel = <#=Pluralize(viewModelName)#>.SingleOrDefault(<#=GetPredicate(viewModelName)#>);

			if (existingViewModel == null)
			{
				return Task.FromResult(((<#=viewModelName#>)null, false));
			}
						
            var indexOfViewModel = <#=Pluralize(viewModelName)#>.IndexOf(existingViewModel);
            existingViewModel = <#=Decapitalize(viewModelName)#>;
<#
	if (extraViewModelNames.Contains(viewModelName))
	{
#>
			existingViewModel.FromNodeId = fromNodeId;
			existingViewModel.ToNodeId = toNodeId;
<#
	}
	else
	{
#>
			existingViewModel.Id = id;
<#
	}
#>
			<#=Pluralize(viewModelName)#>[indexOfViewModel] = existingViewModel;

            return Task.FromResult((existingViewModel, true));
        }

        public Task<bool> Delete<#=viewModelName#>Async(<#=GetIdProperties(viewModelName)#>)
        {
            var existingViewModel = <#=Pluralize(viewModelName)#>.SingleOrDefault(<#=GetPredicate(viewModelName)#>);

			if (existingViewModel == null)
			{
				return Task.FromResult(false);
			}

			<#=Pluralize(viewModelName)#>.Remove(existingViewModel);
            return Task.FromResult(true);
        }

<#
}
#>
    }
}