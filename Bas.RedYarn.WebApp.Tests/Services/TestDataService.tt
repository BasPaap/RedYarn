<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

using Bas.RedYarn.WebApp.ViewModels;
using Bas.RedYarn.WebApp.Services;
using System;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;

namespace Bas.RedYarn.WebApp.Tests.Services
{
    sealed class TestDataService : IDataService
    {
<#
foreach (var viewModelName in viewModelNames)
{#>
		public Collection<<#=viewModelName#>> <#=viewModelName#>s { get; set; } = new Collection<<#=viewModelName#>>();
<#}
#>

<#
foreach (var viewModelName in viewModelNames)
{#>
        public Task<<#=viewModelName#>> Get<#=viewModelName#>Async(Guid id)
        {
            return Task.FromResult(<#=viewModelName#>s.SingleOrDefault(d => d.Id == id));
        }

        public Task<<#=viewModelName#>> Create<#=viewModelName#>Async(<#=viewModelName#> <#=Decapitalize(viewModelName)#>)
        {
            <#=Decapitalize(viewModelName)#>.Id = Guid.NewGuid();
            <#=viewModelName#>s.Add(<#=Decapitalize(viewModelName)#>);

            return Task.FromResult(<#=Decapitalize(viewModelName)#>);
        }

        public Task<<#=viewModelName#>> Update<#=viewModelName#>Async(Guid id, <#=viewModelName#> <#=Decapitalize(viewModelName)#>)
        {
            var existingViewModel = <#=viewModelName#>s.SingleOrDefault(d => d.Id == id);

			if (existingViewModel == null)
			{
				throw new ArgumentException("<#=viewModelName#> not found.", nameof(id));
			}
						
            var indexOfViewModel = <#=viewModelName#>s.IndexOf(existingViewModel);
            existingViewModel = <#=Decapitalize(viewModelName)#>;
            existingViewModel.Id = id;
			<#=viewModelName#>s[indexOfViewModel] = existingViewModel;

            return Task.FromResult(existingViewModel);
        }

        public Task Delete<#=viewModelName#>Async(Guid id)
        {
            var existingViewModel = <#=viewModelName#>s.SingleOrDefault(d => d.Id == id);
            <#=viewModelName#>s.Remove(existingViewModel);

            return Task.CompletedTask;
        }
<#}
#>
    }
}
<#+
private string Decapitalize(string capitalizedString)
{
	return Char.ToLowerInvariant(capitalizedString[0]) + capitalizedString.Substring(1);
}

List<string> viewModelNames = new List<string> { 
	"DiagramViewModel", 
	"CharacterViewModel", 
	"StorylineViewModel", 
	"AuthorViewModel" 
};
#>