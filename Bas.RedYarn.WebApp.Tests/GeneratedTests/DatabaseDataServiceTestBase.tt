<#@ include file="$(SolutionDir)common.t4" #>
<#@ assembly name="$(SolutionDir)\Bas.RedYarn.WebApp\bin\Debug\netcoreapp2.1\Bas.RedYarn.WebApp.dll" #>
<#@ import namespace="Bas.RedYarn.WebApp.ViewModels" #>
using Bas.RedYarn.WebApp.Database;
using Bas.RedYarn.WebApp.Services;
using Bas.RedYarn.WebApp.ViewModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Threading.Tasks;

namespace Bas.RedYarn.WebApp.Tests
{	
    public abstract class DatabaseDataServiceTestBase
    {
        private DatabaseDataService dataService;
        private RedYarnDbContext dbContextToAddTo;
		private RedYarnDbContext dbContextToTest;

        public TestContext TestContext { get; set; }
		
		protected static void AssertPropertiesAreEqual<T>(T testObject, T actualObject, params string[] propertyNames)
        {
            foreach (var propertyName in propertyNames)
            {
                var property = typeof(T).GetProperty(propertyName);
                Assert.AreEqual(property.GetValue(testObject), property.GetValue(actualObject));
            }
        }

		[TestInitialize]
		public void Initialize()
        {            
			var options = new DbContextOptionsBuilder<RedYarnDbContext>()
                .UseInMemoryDatabase(databaseName: $"{TestContext.TestName}_InMemoryDatabase")
                .Options;
							   		
			this.dataService = new DatabaseDataService(new RedYarnDbContext(options));
            this.dbContextToAddTo = new RedYarnDbContext(options); // This needs to be a separate instance from the one used in DatabaseDataService in order to properly test!
			this.dbContextToTest = new RedYarnDbContext(options); // This needs to be a separate instance from the other two in order to properly test!
        }

<#
foreach (var viewModelName in viewModelNames)
{
	var modelName = GetModelName(viewModelName);
	if (EntityHasNode(modelName))
	{
#>
		protected abstract (<#=modelName#> model, <#=modelName#>Node node) GetTest<#=modelName#>();		
		protected abstract void Assert<#=modelName#>(<#=modelName#> model, <#=modelName#>Node node);		
<#	}
	else
	{
#>
		protected abstract <#=modelName#> GetTest<#=modelName#>();		
		protected abstract void Assert<#=modelName#>(<#=modelName#> model);		
<#	}

	if (viewModelName == nameof(RelationshipViewModel))
	{#>
		protected abstract void Assert<#=viewModelName#>(<#=viewModelName#> viewModel, Func<object, (Guid, Guid)> getIdsForModelFunc);
		protected abstract <#=viewModelName#> GetTest<#=viewModelName#>(Func<object, (Guid, Guid)> getIdsForModelFunc = null);
		protected abstract <#=viewModelName#> GetUpdated<#=viewModelName#>(Func<object, (Guid, Guid)> getIdsForModelFunc = null);
<#	}
	else	
	{#>
		protected abstract void Assert<#=viewModelName#>(<#=viewModelName#> viewModel);		
		protected abstract <#=viewModelName#> GetTest<#=viewModelName#>();
		protected abstract <#=viewModelName#> GetUpdated<#=viewModelName#>();
<#	}
#>		protected abstract void AssertUpdated<#=viewModelName#>(<#=viewModelName#> viewModel);
		
		
		[TestMethod]
		public void Get<#=viewModelName#>Async_IdIsUnknown_ReturnsNull()
		{
			// Arrange
			var test<#=modelName#> = GetTest<#=modelName#>();
<#
			if (EntityHasNode(modelName))
			{
#>
			this.dbContextToAddTo.<#=modelName#>Nodes.Add(test<#=modelName#>.node);
			this.dbContextToAddTo.<#=Pluralize(modelName)#>.Add(test<#=modelName#>.model);
<#			}
			else
			{
#>
			this.dbContextToAddTo.<#=Pluralize(modelName)#>.Add(test<#=modelName#>);
<#			}#>
			this.dbContextToAddTo.SaveChanges();

			// Act
			var result = this.dataService.Get<#=viewModelName#>Async(<#
			if (GetNumIdParameters(modelName) > 1)
			{
				Write(string.Join(", ", modelsWithCompositeKeys[modelName].Select(k => $"Guid.NewGuid()")));
			}
			else
			{
				Write("Guid.NewGuid()");
			}
#>).Result;

			// Assert			
			Assert.IsNull(result);
		}

		[TestMethod]
		public void Get<#=viewModelName#>Async_IdIsOK_Returns<#=viewModelName#>()
		{
			// Arrange
			var test<#=modelName#> = GetTest<#=modelName#>();
<#
			if (EntityHasNode(modelName))
			{
#>
			this.dbContextToAddTo.<#=modelName#>Nodes.Add(test<#=modelName#>.node);
			this.dbContextToAddTo.<#=Pluralize(modelName)#>.Add(test<#=modelName#>.model);
<#			}
			else
			{
#>
			this.dbContextToAddTo.<#=Pluralize(modelName)#>.Add(test<#=modelName#>);
<#			}#>
			this.dbContextToAddTo.SaveChanges();
<#		
			string modelSuffix = EntityHasNode(modelName) ? ".model" : string.Empty;
			
			if (modelsWithCompositeKeys.Keys.Contains(modelName))
			{
				foreach	(var key in modelsWithCompositeKeys[modelName])
				{
					WriteLine($"\t\t\tvar new{key} = (Guid)this.dbContextToAddTo.Entry(test{modelName}{modelSuffix}).Property(\"{key}\").CurrentValue;");
				}
			}
			else
			{#>
			var newId = (Guid)this.dbContextToAddTo.Entry(test<#=modelName#><#=modelSuffix#>).Property(ShadowPropertyNames.Id).CurrentValue;
<#			
			}
			
			string newIdArguments = (modelsWithCompositeKeys.Keys.Contains(modelName)) ? string.Join(", ",  modelsWithCompositeKeys[modelName].Select(k => $"new{k}")): "newId"; #>			
			// Act
			var viewModel = this.dataService.Get<#=viewModelName#>Async(<#=newIdArguments#>).Result;

			// Assert
<#	if (viewModelName == nameof(RelationshipViewModel))
	{#>
			Assert<#=viewModelName#>(viewModel, r => (newFromNodeId, newToNodeId));
<#	}
	else
	{#>
			Assert<#=viewModelName#>(viewModel);
<#	}#>
		}

		[TestMethod]
		public void Delete<#=viewModelName#>Async_IdIsUnknown_ReturnsFalse()
		{
			// Arrange
			var test<#=modelName#> = GetTest<#=modelName#>();
<#
			if (EntityHasNode(modelName))
			{
#>
			this.dbContextToAddTo.<#=modelName#>Nodes.Add(test<#=modelName#>.node);
			this.dbContextToAddTo.<#=Pluralize(modelName)#>.Add(test<#=modelName#>.model);
<#			}
			else
			{
#>
			this.dbContextToAddTo.<#=Pluralize(modelName)#>.Add(test<#=modelName#>);
<#			}#>
			this.dbContextToAddTo.SaveChanges();

			// Act
			var result = this.dataService.Delete<#=viewModelName#>Async(<#
			if (GetNumIdParameters(modelName) > 1)
			{
				Write(string.Join(", ", modelsWithCompositeKeys[modelName].Select(k => $"Guid.NewGuid()")));
			}
			else
			{
				Write("Guid.NewGuid()");
			}
#>).Result;

			// Assert	
			Assert.IsFalse(result);
			Assert.AreEqual(1, this.dbContextToTest.<#=Pluralize(modelName)#>.CountAsync().Result);
<#			if (EntityHasNode(modelName))
			{#>
			Assert.AreEqual(1, this.dbContextToTest.<#=modelName#>Nodes.CountAsync().Result);
<#			}#>
		}

		[TestMethod]
		public void Delete<#=viewModelName#>Async_IdIsOK_<#=viewModelName#>IsDeletedAndReturnsTrue()
		{
			// Arrange
			var test<#=modelName#> = GetTest<#=modelName#>();
<#
			if (EntityHasNode(modelName))
			{
#>
			this.dbContextToAddTo.<#=Pluralize(modelName)#>.Add(test<#=modelName#>.model);
			this.dbContextToAddTo.<#=modelName#>Nodes.Add(test<#=modelName#>.node);
<#			}
			else
			{
#>
			this.dbContextToAddTo.<#=Pluralize(modelName)#>.Add(test<#=modelName#>);
<#			}#>
			this.dbContextToAddTo.SaveChanges();
<#

			if (modelsWithCompositeKeys.Keys.Contains(modelName))
			{
				foreach	(var key in modelsWithCompositeKeys[modelName])
				{
					WriteLine($"\t\t\tvar new{key} = (Guid)this.dbContextToAddTo.Entry(test{modelName}{modelSuffix}).Property(\"{key}\").CurrentValue;");
				}
			}
			else
			{#>
			var newId = (Guid)this.dbContextToAddTo.Entry(test<#=modelName#><#=modelSuffix#>).Property(ShadowPropertyNames.Id).CurrentValue;
<#			
			}

			#>		
			// Act
			var result = this.dataService.Delete<#=viewModelName#>Async(<#=newIdArguments#>).Result;

			// Assert
			Assert.IsTrue(result);
			Assert.AreEqual(0, this.dbContextToTest.<#=Pluralize(modelName)#>.CountAsync().Result);
<#			if (EntityHasNode(modelName))
			{#>
			Assert.AreEqual(0, this.dbContextToTest.<#=modelName#>Nodes.CountAsync().Result);
<#			}#>
		}

		// Create
		[TestMethod]
		public async Task Create<#=viewModelName#>Async_ModelIsNull_ThrowsArgumentNullExceptionAsync()
		{
			// Arrange
			// Act
			// Assert
			var exception = await Assert.ThrowsExceptionAsync<ArgumentNullException>(async () => await this.dataService.Create<#=viewModelName#>Async(<#if (entitiesToAddToDiagram.Contains(GetModelName(viewModelName))) { #>Guid.Empty, <#}#>null) );
			Assert.AreEqual("<#=Decapitalize(viewModelName)#>", exception.ParamName);
		}

		[TestMethod]
		public void Create<#=viewModelName#>Async_ViewModelIsValid_AddsModelAndReturnsViewModel()
		{
			// Arrange
<#			if (viewModelName == nameof(RelationshipViewModel))
			{
#>			var relationship = GetTestRelationship();			
			this.dbContextToAddTo.Characters.Add(relationship.FirstCharacter);
			this.dbContextToAddTo.Characters.Add(relationship.SecondCharacter);
			this.dbContextToAddTo.SaveChanges();
			Func<object, (Guid, Guid)> getIdsForModelFunc = r => ((Guid)this.dbContextToAddTo.Entry(relationship.FirstCharacter).Property(ShadowPropertyNames.Id).CurrentValue, (Guid)this.dbContextToAddTo.Entry(relationship.SecondCharacter).Property(ShadowPropertyNames.Id).CurrentValue);

			var testRelationshipViewModel = new RelationshipViewModel(relationship, getIdsForModelFunc);
<#			}
			else
			{
#>			var test<#=viewModelName#> = GetTest<#=viewModelName#>();
<#			}
			
			if (entitiesToAddToDiagram.Contains(GetModelName(viewModelName))) 
			{#>
			var diagram = new Diagram()
			{
				Name = "Diagram"
			};
			this.dbContextToAddTo.Diagrams.Add(diagram);
			this.dbContextToAddTo.SaveChanges();
			var diagramId = (Guid)this.dbContextToAddTo.Entry(diagram).Property(ShadowPropertyNames.Id).CurrentValue;
<#			}
#>

			// Act
			var returnedViewModel = this.dataService.Create<#=viewModelName#>Async(<#if (entitiesToAddToDiagram.Contains(GetModelName(viewModelName))) { #>diagramId, <#}#>test<#=viewModelName#>).Result;

			// Assert
			Assert.AreEqual(1, this.dbContextToTest.<#=Pluralize(modelName)#>.CountAsync().Result);			
<#	if (modelsWithCompositeKeys.Keys.Contains(modelName))
	{
		foreach (var key in modelsWithCompositeKeys[modelName])
		{
			WriteLine($"\t\t\tAssert.AreEqual(this.dbContextToTest.Entry(this.dbContextToTest.{Pluralize(modelName)}.SingleAsync().Result).Property(\"{key}\").CurrentValue, returnedViewModel.{key});");
		}
	}
	else
	{#>
			Assert.AreEqual(this.dbContextToTest.Entry(this.dbContextToTest.<#=Pluralize(modelName)#>.SingleAsync().Result).Property(ShadowPropertyNames.Id).CurrentValue, returnedViewModel.Id);<#
	}					
			
			
	if (entitiesToAddToDiagram.Contains(GetModelName(viewModelName))) 
			{#>

			Assert.AreEqual(diagramId, this.dbContextToTest.Entry(this.dbContextToTest.<#=Pluralize(modelName)#>.SingleAsync().Result).Property("DiagramId").CurrentValue);
<#			}

	if (viewModelName == nameof(RelationshipViewModel))
	{#>
			Assert<#=viewModelName#>(returnedViewModel, getIdsForModelFunc);
<#	}
	else
	{#>
			Assert<#=viewModelName#>(returnedViewModel);
<#	}

			if (EntityHasNode(modelName))
			{#>
			Assert.AreEqual(1, this.dbContextToTest.<#=modelName#>Nodes.CountAsync().Result);
			Assert<#=modelName#>(this.dbContextToTest.<#=Pluralize(modelName)#>.SingleAsync().Result, this.dbContextToTest.<#=modelName#>Nodes.SingleAsync().Result);
<#			}
			else
			{
				if (viewModelName == nameof(RelationshipViewModel))
				{#>
			Assert<#=modelName#>(this.dbContextToTest.<#=Pluralize(modelName)#>.Include(r => r.FirstCharacter).Include(r => r.SecondCharacter).SingleAsync().Result);
<#				}
				else
				{#>
			Assert<#=modelName#>(this.dbContextToTest.<#=Pluralize(modelName)#>.SingleAsync().Result);
<#				}			
			}#>
		}

		[TestMethod]
		public void Update<#=viewModelName#>Async_IdIsUnknown_ReturnsNullAndFalse()
		{
			// Arrange			
			var test<#=viewModelName#> = GetTest<#=viewModelName#>();
			var test<#=modelName#> = GetTest<#=modelName#>();
<#
			if (EntityHasNode(modelName))
			{
#>
			this.dbContextToAddTo.<#=modelName#>Nodes.Add(test<#=modelName#>.node);
			this.dbContextToAddTo.<#=Pluralize(modelName)#>.Add(test<#=modelName#>.model);
<#			}
			else
			{
#>
			this.dbContextToAddTo.<#=Pluralize(modelName)#>.Add(test<#=modelName#>);
<#			}#>
			this.dbContextToAddTo.SaveChanges();

			// Act
			var result = this.dataService.Update<#=viewModelName#>Async(<#
			if (GetNumIdParameters(modelName) > 1)
			{
				Write(string.Join(", ", modelsWithCompositeKeys[modelName].Select(k => $"Guid.NewGuid()")));
			}
			else
			{
				Write("Guid.NewGuid()");
			}
#>, test<#=viewModelName#>).Result;

			// Assert
			Assert.IsNull(result.result);
			Assert.IsFalse(result.isFound);
			Assert.AreEqual(1, this.dbContextToTest.<#=Pluralize(modelName)#>.CountAsync().Result);
<#			if (EntityHasNode(modelName))
			{#>
			Assert.AreEqual(1, this.dbContextToTest.<#=modelName#>Nodes.CountAsync().Result);
<#			}#>
		}

		[TestMethod]
		public async Task Update<#=viewModelName#>Async_ModelIsNull_ThrowsArgumentNullExceptionAsync()
		{
			// Arrange			
			var test<#=viewModelName#> = GetTest<#=viewModelName#>();
			var test<#=modelName#> = GetTest<#=modelName#>();
<#
			if (EntityHasNode(modelName))
			{
#>
			this.dbContextToAddTo.<#=modelName#>Nodes.Add(test<#=modelName#>.node);
			this.dbContextToAddTo.<#=Pluralize(modelName)#>.Add(test<#=modelName#>.model);
<#			}
			else
			{
#>
			this.dbContextToAddTo.<#=Pluralize(modelName)#>.Add(test<#=modelName#>);
<#			}#>
			this.dbContextToAddTo.SaveChanges();

			// Act
			// Assert
			var exception = await Assert.ThrowsExceptionAsync<ArgumentNullException>(async () => await this.dataService.Update<#=viewModelName#>Async(<#
			if (GetNumIdParameters(modelName) > 1)
			{
				Write(string.Join(", ", modelsWithCompositeKeys[modelName].Select(k => $"Guid.NewGuid()")));
			}
			else
			{
				Write("Guid.NewGuid()");
			}
#>, null));
			Assert.AreEqual("<#=Decapitalize(viewModelName)#>", exception.ParamName);
			Assert.AreEqual(1, this.dbContextToTest.<#=Pluralize(modelName)#>.CountAsync().Result);
<#			if (EntityHasNode(modelName))
			{#>
			Assert.AreEqual(1, this.dbContextToTest.<#=modelName#>Nodes.CountAsync().Result);
<#			}#>
		}

		[TestMethod]
		public void Update<#=viewModelName#>Async_ArgumentsAreOK_ReturnsUpdatedModelAndTrue()
		{
			// Arrange			
			var test<#=viewModelName#> = GetTest<#=viewModelName#>();
			var test<#=modelName#> = GetTest<#=modelName#>();
<#
			if (EntityHasNode(modelName))
			{
#>
			this.dbContextToAddTo.<#=modelName#>Nodes.Add(test<#=modelName#>.node);
			this.dbContextToAddTo.<#=Pluralize(modelName)#>.Add(test<#=modelName#>.model);
<#			}
			else
			{
#>
			this.dbContextToAddTo.<#=Pluralize(modelName)#>.Add(test<#=modelName#>);
<#			}#>
			this.dbContextToAddTo.SaveChanges();
<#			

	if (modelsWithCompositeKeys.Keys.Contains(modelName))
	{
		foreach (var key in modelsWithCompositeKeys[modelName])
		{
			WriteLine($"\t\t\tvar new{key} = (Guid)this.dbContextToAddTo.Entry(test{modelName}{modelSuffix}).Property(\"{key}\").CurrentValue;");
		}
	}
	else
	{#>
			var newId = (Guid)this.dbContextToAddTo.Entry(test<#=modelName#><#=modelSuffix#>).Property(ShadowPropertyNames.Id).CurrentValue;
<#	}#>
			var updated<#=viewModelName#> = GetUpdated<#=viewModelName#>();
<#
	if (modelsWithCompositeKeys.Keys.Contains(modelName))
	{
		foreach (var key in modelsWithCompositeKeys[modelName])
		{
			WriteLine($"\t\t\tupdated{viewModelName}.{key} = new{key};");
		}
	}
	else
	{#>
			updated<#=viewModelName#>.Id = newId;
<#	}#>

			// Act
			var result = this.dataService.Update<#=viewModelName#>Async(<#=newIdArguments#>, updated<#=viewModelName#>).Result;

			// Assert
			Assert.IsNotNull(result.result);
			Assert.IsTrue(result.isFound);
<#
	if (modelsWithCompositeKeys.Keys.Contains(modelName))
	{
		foreach (var key in modelsWithCompositeKeys[modelName])
		{
			WriteLine($"\t\t\tAssert.AreEqual(new{key}, result.result.{key});");
		}
	}
	else
	{
			WriteLine("\t\t\tAssert.AreEqual(newId, result.result.Id);");
	}
#>
			Assert.AreEqual(1, this.dbContextToTest.<#=Pluralize(modelName)#>.CountAsync().Result);
<#			if (EntityHasNode(modelName))
			{#>
			Assert.AreEqual(1, this.dbContextToTest.<#=modelName#>Nodes.CountAsync().Result);
<#			}#>
			
			AssertUpdated<#=viewModelName#>(result.result);
		}

<#}#>
	}
}