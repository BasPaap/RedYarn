<#@ include file="$(SolutionDir)common.t4" #>
<#@ assembly name="$(SolutionDir)\Bas.RedYarn.WebApp\bin\Debug\netcoreapp2.1\Bas.RedYarn.WebApp.dll" #>
<#@ import namespace="Bas.RedYarn.WebApp.ViewModels" #>
using Bas.RedYarn.WebApp.Database;
using Bas.RedYarn.WebApp.Services;
using Bas.RedYarn.WebApp.ViewModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Threading.Tasks;

namespace Bas.RedYarn.WebApp.Tests
{	
    public abstract class DatabaseDataServiceTestBase
    {
        private DatabaseDataService dataService;
        private RedYarnDbContext dbContextToAddTo;
		private RedYarnDbContext dbContextToTest;

        public TestContext TestContext { get; set; }
		
		protected static void AssertPropertiesAreEqual<T>(T testObject, T actualObject, params string[] propertyNames)
        {
            foreach (var propertyName in propertyNames)
            {
                var property = typeof(T).GetProperty(propertyName);
                Assert.AreEqual(property.GetValue(testObject), property.GetValue(actualObject));
            }
        }

		[TestInitialize]
		public void Initialize()
        {            
			var options = new DbContextOptionsBuilder<RedYarnDbContext>()
                .UseInMemoryDatabase(databaseName: $"{TestContext.TestName}_InMemoryDatabase")
                .Options;
							   		
			this.dataService = new DatabaseDataService(new RedYarnDbContext(options));
            this.dbContextToAddTo = new RedYarnDbContext(options); // This needs to be a separate instance from the one used in DatabaseDataService in order to properly test!
			this.dbContextToTest = new RedYarnDbContext(options); // This needs to be a separate instance from the other two in order to properly test!
        }

<#

foreach (var viewModelName in viewModelNames)
{
	var modelName = GetModelName(viewModelName);
	var modelTypeName = (extraViewModelNames.Contains(viewModelName)) ? GetJoinTableTypeName(viewModelName) : GetModelName(viewModelName);
	
	if (EntityHasNode(modelName))
	{
#>
		protected abstract (<#=modelName#> model, <#=modelName#>Node node) GetTest<#=modelName#>();		
		protected abstract void Assert<#=modelName#>(<#=modelName#> model, <#=modelName#>Node node);		
<#
	}
	else
	{
#>
		protected abstract <#=modelTypeName#> GetTest<#=modelName#>();		
		protected abstract void Assert<#=modelName#>(<#=modelTypeName#> model);		
<#
	}

	if (viewModelName == nameof(CharacterPlotElementConnectionViewModel))
    {
#>
		protected abstract <#=viewModelName#> GetTest<#=viewModelName#>(Func<(Guid, Guid)> getNodeIdsFunc, CharacterPlotElementJoinTable model);
		protected abstract <#=viewModelName#> GetUpdated<#=viewModelName#>(Func<(Guid, Guid)> getNodeIdsFunc, CharacterPlotElementJoinTable model);
<#
    }
	else
    {
#>
		protected abstract <#=viewModelName#> GetTest<#=viewModelName#>(<#= connectionViewModelNames.Contains(viewModelName) ? "Func<(Guid, Guid)> getNodeIdsFunc" : string.Empty#>);
		protected abstract <#=viewModelName#> GetUpdated<#=viewModelName#>(<#= connectionViewModelNames.Contains(viewModelName) ? "Func<(Guid, Guid)> getNodeIdsFunc" : string.Empty#>);
<#
	}
#>
		
		protected abstract void Assert<#=viewModelName#>(<#=viewModelName#> viewModel);		
		protected abstract void AssertUpdated<#=viewModelName#>(<#=viewModelName#> viewModel);

		[TestMethod]
		public void Get<#=viewModelName#>Async_IdIsUnknown_ReturnsNull()
		{
			// Arrange
			var test<#=modelName#> = GetTest<#=modelName#>();
<#
	if (EntityHasNode(modelName))
	{
#>
			this.dbContextToAddTo.<#=modelName#>Nodes.Add(test<#=modelName#>.node);
			this.dbContextToAddTo.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.Add(test<#=modelName#>.model);
<#
	}
	else
	{
#>
			this.dbContextToAddTo.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.Add(test<#=modelName#>);
<#
	}
#>
			this.dbContextToAddTo.SaveChanges();

			// Act
<#
	if (extraViewModelNames.Contains(viewModelName))
	{
#>
			var result = this.dataService.Get<#=viewModelName#>Async(Guid.NewGuid(), Guid.NewGuid()).Result;
<#
	}
	else
	{
#>
			var result = this.dataService.Get<#=viewModelName#>Async(Guid.NewGuid()).Result;
<#
	}
#>
			// Assert			
			Assert.IsNull(result);
		}

		[TestMethod]
		public void Get<#=viewModelName#>Async_IdIsOK_Returns<#=viewModelName#>()
		{
			// Arrange
			var test<#=modelName#> = GetTest<#=modelName#>();
<#
	if (EntityHasNode(modelName))
	{
#>
			this.dbContextToAddTo.<#=modelName#>Nodes.Add(test<#=modelName#>.node);
			this.dbContextToAddTo.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.Add(test<#=modelName#>.model);
<#
	}
	else
	{
		if (extraViewModelNames.Contains(viewModelName))
		{	
#>			
			this.dbContextToAddTo.<#=Pluralize(extraViewModelConnectionTypeNames[viewModelName][0])#>.Add(test<#=modelName#>.LeftEntity);
			this.dbContextToAddTo.<#=Pluralize(extraViewModelConnectionTypeNames[viewModelName][1])#>.Add(test<#=modelName#>.RightEntity);
			this.dbContextToAddTo.SaveChanges();
<#
		}
#>
			this.dbContextToAddTo.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.Add(test<#=modelName#>);
<#
	}
#>
			this.dbContextToAddTo.SaveChanges();
<#		
	string modelSuffix = EntityHasNode(modelName) ? ".model" : string.Empty;
	
	if (extraViewModelNames.Contains(viewModelName))
	{
#>

			// Act
			var viewModel = this.dataService.Get<#=viewModelName#>Async((Guid)this.dbContextToAddTo.Entry(test<#=modelName#>.LeftEntity).Property(ShadowPropertyNames.Id).CurrentValue,
																						     (Guid)this.dbContextToAddTo.Entry(test<#=modelName#>.RightEntity).Property(ShadowPropertyNames.Id).CurrentValue).Result;
<#
	}
	else
	{
#>
			var newId = (Guid)this.dbContextToAddTo.Entry(test<#=modelName#><#=modelSuffix#>).Property(ShadowPropertyNames.Id).CurrentValue;

			// Act
			var viewModel = this.dataService.Get<#=viewModelName#>Async(newId).Result;
<#

	}
#>
			
			// Assert
			Assert<#=viewModelName#>(viewModel);
		}

		[TestMethod]
		public void Delete<#=viewModelName#>Async_IdIsUnknown_ReturnsFalse()
		{
			// Arrange
			var test<#=modelName#> = GetTest<#=modelName#>();
<#
	if (EntityHasNode(modelName))
	{
#>
			this.dbContextToAddTo.<#=modelName#>Nodes.Add(test<#=modelName#>.node);
			this.dbContextToAddTo.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.Add(test<#=modelName#>.model);
<#
	}
	else
	{
		if (extraViewModelNames.Contains(viewModelName))
		{
#>			
			this.dbContextToAddTo.<#=Pluralize(extraViewModelConnectionTypeNames[viewModelName][0])#>.Add(test<#=modelName#>.LeftEntity);
			this.dbContextToAddTo.<#=Pluralize(extraViewModelConnectionTypeNames[viewModelName][1])#>.Add(test<#=modelName#>.RightEntity);
			this.dbContextToAddTo.SaveChanges();
<#
		}
#>
			this.dbContextToAddTo.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.Add(test<#=modelName#>);
<#
	}
#>
			this.dbContextToAddTo.SaveChanges();

			// Act
			var result = this.dataService.Delete<#=viewModelName#>Async(<#=extraViewModelNames.Contains(viewModelName) ? "Guid.NewGuid(), Guid.NewGuid()" : "Guid.NewGuid()"#>).Result;

			// Assert	
			Assert.IsFalse(result);
			Assert.AreEqual(1, this.dbContextToTest.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.CountAsync().Result);
<#	if (EntityHasNode(modelName))
	{
#>
			Assert.AreEqual(1, this.dbContextToTest.<#=modelName#>Nodes.CountAsync().Result);
<#
	}
#>
		}

		[TestMethod]
		public void Delete<#=viewModelName#>Async_IdIsOK_<#=viewModelName#>IsDeletedAndReturnsTrue()
		{
			// Arrange
			var test<#=modelName#> = GetTest<#=modelName#>();
<#
	if (EntityHasNode(modelName))
	{
#>
			this.dbContextToAddTo.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.Add(test<#=modelName#>.model);
			this.dbContextToAddTo.<#=modelName#>Nodes.Add(test<#=modelName#>.node);
<#
	}
	else
	{
		if (extraViewModelNames.Contains(viewModelName))
		{
#>			
			this.dbContextToAddTo.<#=Pluralize(extraViewModelConnectionTypeNames[viewModelName][0])#>.Add(test<#=modelName#>.LeftEntity);
			this.dbContextToAddTo.<#=Pluralize(extraViewModelConnectionTypeNames[viewModelName][1])#>.Add(test<#=modelName#>.RightEntity);
			this.dbContextToAddTo.SaveChanges();
<#
		}
#>
			this.dbContextToAddTo.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.Add(test<#=modelName#>);
<#
	}
#>
			this.dbContextToAddTo.SaveChanges();

<#
	if (extraViewModelNames.Contains(viewModelName))
	{
#>
			// Act
			var result = this.dataService.Delete<#=viewModelName#>Async((Guid)this.dbContextToAddTo.Entry(test<#=modelName#>.LeftEntity).Property(ShadowPropertyNames.Id).CurrentValue,
																						     (Guid)this.dbContextToAddTo.Entry(test<#=modelName#>.RightEntity).Property(ShadowPropertyNames.Id).CurrentValue).Result;
<#
	}
	else
	{
#>
			var newId = (Guid)this.dbContextToAddTo.Entry(test<#=modelName#><#=modelSuffix#>).Property(ShadowPropertyNames.Id).CurrentValue;
			// Act
			var result = this.dataService.Delete<#=viewModelName#>Async(newId).Result;
<#
	}
#>
			// Assert
			Assert.IsTrue(result);
			Assert.AreEqual(0, this.dbContextToTest.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.CountAsync().Result);
<#
	if (EntityHasNode(modelName))
	{
#>
			Assert.AreEqual(0, this.dbContextToTest.<#=modelName#>Nodes.CountAsync().Result);
<#
	}
#>
		}

		// Create
		[TestMethod]
		public async Task Create<#=viewModelName#>Async_ModelIsNull_ThrowsArgumentNullExceptionAsync()
		{
			// Arrange
			// Act
			// Assert
			var exception = await Assert.ThrowsExceptionAsync<ArgumentNullException>(async () => await this.dataService.Create<#=viewModelName#>Async(<#if (entitiesToAddToDiagram.Contains(GetModelName(viewModelName))) { #>Guid.Empty, <#}#>null) );
			Assert.AreEqual("<#=Decapitalize(viewModelName)#>", exception.ParamName);
		}

		[TestMethod]
		public void Create<#=viewModelName#>Async_ViewModelIsValid_AddsModelAndReturnsViewModel()
		{
			// Arrange
<#
	if (viewModelName == nameof(RelationshipViewModel))
	{
#>			var relationship = GetTestRelationship();			
			this.dbContextToAddTo.Characters.Add(relationship.FirstCharacter);
			this.dbContextToAddTo.Characters.Add(relationship.SecondCharacter);
			this.dbContextToAddTo.SaveChanges();
			Func<(Guid, Guid)> getNodeIdsFunc = () => ((Guid)this.dbContextToAddTo.Entry(relationship.FirstCharacter).Property(ShadowPropertyNames.Id).CurrentValue, 
													   (Guid)this.dbContextToAddTo.Entry(relationship.SecondCharacter).Property(ShadowPropertyNames.Id).CurrentValue);
<#
	}
#>
			var test<#=modelName#> = GetTest<#=modelName#>();		
<#
	if (extraViewModelNames.Contains(viewModelName))
	{
#>			
			this.dbContextToAddTo.<#=Pluralize(extraViewModelConnectionTypeNames[viewModelName][0])#>.Add(test<#=modelName#>.LeftEntity);
			this.dbContextToAddTo.<#=Pluralize(extraViewModelConnectionTypeNames[viewModelName][1])#>.Add(test<#=modelName#>.RightEntity);
			this.dbContextToAddTo.SaveChanges();

			Func<(Guid, Guid)> getNodeIdsFunc = () => ((Guid)this.dbContextToAddTo.Entry(test<#=modelName#>.LeftEntity).Property(ShadowPropertyNames.Id).CurrentValue, 
													   (Guid)this.dbContextToAddTo.Entry(test<#=modelName#>.RightEntity).Property(ShadowPropertyNames.Id).CurrentValue);
<#
	}
#>			
			var test<#=viewModelName#> = GetTest<#=viewModelName#>(<#= connectionViewModelNames.Contains(viewModelName) ? "getNodeIdsFunc" : string.Empty #><#= (viewModelName == nameof(CharacterPlotElementConnectionViewModel)) ? $", test{modelName}" : string.Empty #>);
<#
	if (entitiesToAddToDiagram.Contains(GetModelName(viewModelName))) 
	{
#>
			var diagram = new Diagram()
			{
				Name = "Diagram"
			};
			this.dbContextToAddTo.Diagrams.Add(diagram);
			this.dbContextToAddTo.SaveChanges();
			var diagramId = (Guid)this.dbContextToAddTo.Entry(diagram).Property(ShadowPropertyNames.Id).CurrentValue;
<#
	}	
#>

			// Act
			var returnedViewModel = this.dataService.Create<#=viewModelName#>Async(<#if (entitiesToAddToDiagram.Contains(GetModelName(viewModelName))) { #>diagramId, <#}#>test<#=viewModelName#>).Result;

			// Assert
			Assert.AreEqual(1, this.dbContextToTest.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.CountAsync().Result);			
<#
	if (entitiesToAddToDiagram.Contains(GetModelName(viewModelName))) 
	{
#>
			Assert.AreEqual(diagramId, this.dbContextToTest.Entry(this.dbContextToTest.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.SingleAsync().Result).Property("DiagramId").CurrentValue);
<#
	}
#>
			Assert<#=viewModelName#>(returnedViewModel);
<#
	if (EntityHasNode(modelName))
	{
#>
			Assert.AreEqual(1, this.dbContextToTest.<#=modelName#>Nodes.CountAsync().Result);
			Assert<#=modelName#>(this.dbContextToTest.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.SingleAsync().Result, this.dbContextToTest.<#=modelName#>Nodes.SingleAsync().Result);
<#
	}
	else
	{
		if (viewModelName == nameof(RelationshipViewModel))
		{
#>
			Assert<#=modelName#>(this.dbContextToTest.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.Include(r => r.FirstCharacter).Include(r => r.SecondCharacter).SingleAsync().Result);
<#
		}
		else if (extraViewModelNames.Contains(viewModelName))
		{
#>
			Assert<#=modelName#>(this.dbContextToTest.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.Include(c => c.LeftEntity).Include(c => c.RightEntity).SingleAsync().Result);
<#
		}			
		else
		{
#>
			Assert<#=modelName#>(this.dbContextToTest.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.SingleAsync().Result);
			Assert.AreEqual(this.dbContextToTest.Entry(this.dbContextToTest.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.SingleAsync().Result).Property(ShadowPropertyNames.Id).CurrentValue, returnedViewModel.Id);	
<#    
		}
	}
#>
		}

		[TestMethod]
		public void Update<#=viewModelName#>Async_IdIsUnknown_ReturnsNullAndFalse()
		{
			// Arrange			
			var test<#=modelName#> = GetTest<#=modelName#>();
			var test<#=viewModelName#> = GetTest<#=viewModelName#>(<#= connectionViewModelNames.Contains(viewModelName) ? "null" : string.Empty #><#= (viewModelName == nameof(CharacterPlotElementConnectionViewModel)) ? $", test{modelName}" : string.Empty #>);

<#
	if (EntityHasNode(modelName))
	{
#>
			this.dbContextToAddTo.<#=modelName#>Nodes.Add(test<#=modelName#>.node);
			this.dbContextToAddTo.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.Add(test<#=modelName#>.model);
<#
	}
	else
	{
#>
			this.dbContextToAddTo.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.Add(test<#=modelName#>);
<#
	}

	if (extraViewModelNames.Contains(viewModelName))
	{
#>			
			this.dbContextToAddTo.<#=Pluralize(extraViewModelConnectionTypeNames[viewModelName][0])#>.Add(test<#=modelName#>.LeftEntity);
			this.dbContextToAddTo.<#=Pluralize(extraViewModelConnectionTypeNames[viewModelName][1])#>.Add(test<#=modelName#>.RightEntity);
			this.dbContextToAddTo.SaveChanges();
<#
	}
#>
			this.dbContextToAddTo.SaveChanges();

			// Act
<#
	if (extraViewModelNames.Contains(viewModelName))
	{
#>
			var result = this.dataService.Update<#=viewModelName#>Async(Guid.NewGuid(), Guid.NewGuid(), test<#=viewModelName#>).Result;
<#
	}
	else
	{
#>
			var result = this.dataService.Update<#=viewModelName#>Async(Guid.NewGuid(), test<#=viewModelName#>).Result;
<#
	}
#>
			
			// Assert
			Assert.IsNull(result.result);
			Assert.IsFalse(result.isFound);
			Assert.AreEqual(1, this.dbContextToTest.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.CountAsync().Result);
<#
	if (EntityHasNode(modelName))
	{
#>
			Assert.AreEqual(1, this.dbContextToTest.<#=modelName#>Nodes.CountAsync().Result);
<#
	}
#>
		}

		[TestMethod]
		public async Task Update<#=viewModelName#>Async_ModelIsNull_ThrowsArgumentNullExceptionAsync()
		{
			// Arrange			
			var test<#=modelName#> = GetTest<#=modelName#>();
			var test<#=viewModelName#> = GetTest<#=viewModelName#>(<#= connectionViewModelNames.Contains(viewModelName) ? "null" : string.Empty #><#= (viewModelName == nameof(CharacterPlotElementConnectionViewModel)) ? $", test{modelName}" : string.Empty #>);
<#
	if (EntityHasNode(modelName))
	{
#>
			this.dbContextToAddTo.<#=modelName#>Nodes.Add(test<#=modelName#>.node);
			this.dbContextToAddTo.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.Add(test<#=modelName#>.model);
<#
	}
	else
	{
#>
			this.dbContextToAddTo.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.Add(test<#=modelName#>);
<#
	}
#>
			this.dbContextToAddTo.SaveChanges();

			// Act
			// Assert
			var exception = await Assert.ThrowsExceptionAsync<ArgumentNullException>(async () => await this.dataService.Update<#=viewModelName#>Async(<#=extraViewModelNames.Contains(viewModelName) ? "Guid.NewGuid(), Guid.NewGuid()" : "Guid.NewGuid()"#>, null));
			Assert.AreEqual("<#=Decapitalize(viewModelName)#>", exception.ParamName);
			Assert.AreEqual(1, this.dbContextToTest.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.CountAsync().Result);
<#
	if (EntityHasNode(modelName))
	{
#>
			Assert.AreEqual(1, this.dbContextToTest.<#=modelName#>Nodes.CountAsync().Result);
<#
	}
#>
		}

		[TestMethod]
		public void Update<#=viewModelName#>Async_ArgumentsAreOK_ReturnsUpdatedModelAndTrue()
		{
			// Arrange			
			var test<#=modelName#> = GetTest<#=modelName#>();
<#
	if (EntityHasNode(modelName))
	{
#>
			this.dbContextToAddTo.<#=modelName#>Nodes.Add(test<#=modelName#>.node);
			this.dbContextToAddTo.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.Add(test<#=modelName#>.model);
<#
	}
	else
	{
		if (extraViewModelNames.Contains(viewModelName))
		{
#>			
			this.dbContextToAddTo.<#=Pluralize(extraViewModelConnectionTypeNames[viewModelName][0])#>.Add(test<#=modelName#>.LeftEntity);
			this.dbContextToAddTo.<#=Pluralize(extraViewModelConnectionTypeNames[viewModelName][1])#>.Add(test<#=modelName#>.RightEntity);
			this.dbContextToAddTo.SaveChanges();
<#
		}
#>
			this.dbContextToAddTo.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.Add(test<#=modelName#>);
<#
	}
#>
			this.dbContextToAddTo.SaveChanges();

<#
	if (extraViewModelNames.Contains(viewModelName))
    {
#>
			Func<(Guid, Guid)> getNodeIdsFunc = () => ((Guid)this.dbContextToAddTo.Entry(test<#=modelName#>.LeftEntity).Property(ShadowPropertyNames.Id).CurrentValue, 
													   (Guid)this.dbContextToAddTo.Entry(test<#=modelName#>.RightEntity).Property(ShadowPropertyNames.Id).CurrentValue);	
<#
    }
	else if (viewModelName == nameof(RelationshipViewModel))
    {
#>
			Func<(Guid, Guid)> getNodeIdsFunc = null;
<#
    }
#>
			
			var test<#=viewModelName#> = GetTest<#=viewModelName#>(<#= connectionViewModelNames.Contains(viewModelName) ? "getNodeIdsFunc" : string.Empty #><#= (viewModelName == nameof(CharacterPlotElementConnectionViewModel)) ? $", test{modelName}" : string.Empty #>);
<#
	if (extraViewModelNames.Contains(viewModelName))
	{
#>
			var updated<#=viewModelName#> = GetUpdated<#=viewModelName#>(<#= connectionViewModelNames.Contains(viewModelName) ? "getNodeIdsFunc" : string.Empty #><#= (viewModelName == nameof(CharacterPlotElementConnectionViewModel)) ? $", test{modelName}" : string.Empty #>);

			// Act
			var result = this.dataService.Update<#=viewModelName#>Async((Guid)this.dbContextToAddTo.Entry(test<#=modelName#>.LeftEntity).Property(ShadowPropertyNames.Id).CurrentValue,
																						     (Guid)this.dbContextToAddTo.Entry(test<#=modelName#>.RightEntity).Property(ShadowPropertyNames.Id).CurrentValue, updated<#=viewModelName#>).Result;
<#
	}
	else
	{
#>
			var newId = (Guid)this.dbContextToAddTo.Entry(test<#=modelName#><#=modelSuffix#>).Property(ShadowPropertyNames.Id).CurrentValue;

			var updated<#=viewModelName#> = GetUpdated<#=viewModelName#>(<#= connectionViewModelNames.Contains(viewModelName) ? "null" : string.Empty #>);
			updated<#=viewModelName#>.Id = newId;

			// Act
			var result = this.dataService.Update<#=viewModelName#>Async(newId, updated<#=viewModelName#>).Result;
<#
	}
#>

			// Assert
			Assert.IsNotNull(result.result);
			Assert.IsTrue(result.isFound);
<#
	if (!extraViewModelNames.Contains(viewModelName))
	{
#>
			Assert.AreEqual(newId, result.result.Id);
<#
	}
#>
			Assert.AreEqual(1, this.dbContextToTest.<#=Pluralize(modelName.Replace("Connection", string.Empty))#>.CountAsync().Result);
<#
	if (EntityHasNode(modelName))
	{
#>
			Assert.AreEqual(1, this.dbContextToTest.<#=modelName#>Nodes.CountAsync().Result);
<#
	}
#>
			
			AssertUpdated<#=viewModelName#>(result.result);
		}

<#
} // End of foreach
#>
	}
}