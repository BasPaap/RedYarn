<#@ include file="$(SolutionDir)common.t4" #><#+
private void WriteTestClass(string unitUnderTestName)
{
	var controllerName = $"{unitUnderTestName}Controller";
	WriteBeginning(controllerName);
	WriteTests(controllerName);
	WriteEnd();
}

private void WriteBeginning(string unitUnderTestName)
{
#>using Bas.RedYarn.WebApp.Tests.Extensions;
using Bas.RedYarn.WebApp.Tests.Helpers;
using Bas.RedYarn.WebApp.Tests.Services;
using Bas.RedYarn.WebApp.ViewModels;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Linq;
using System.Net.Http;

namespace Bas.RedYarn.WebApp.Tests
{
	[TestClass]
    public partial class <#= unitUnderTestName #>Test
    {
		private TestDataService dataService;
        private HttpClient httpClient;
		
        [TestInitialize]
        public void Initialize()
        {
			this.dataService = new TestDataService();
			this.httpClient = TestServerHelper.GetTestClient(this.dataService);
        }
<#+
}

private void WriteEnd()
{
#>
	}
}
<#+
}

private void WriteKeyAssert(string modelName, string viewModelInstanceName)
{
	if (modelsWithCompositeKeys.Keys.Contains(modelName))
	{
		foreach (var key in modelsWithCompositeKeys[modelName])
		{
			WriteLine($"\t\t\tAssert.AreEqual({viewModelInstanceName}.{key}, this.dataService.{modelName}ViewModels.Single().{key});");
		}
	}
	else
	{
		WriteLine($"\t\t\tAssert.AreEqual({viewModelInstanceName}.Id, this.dataService.{modelName}ViewModels.Single().Id);");
	}
}

private void WriteKeyAssert(string modelName, string viewModelInstanceName, string owningInstanceName)
{
	if (modelsWithCompositeKeys.Keys.Contains(modelName))
	{
		foreach (var key in modelsWithCompositeKeys[modelName])
		{
			WriteLine($"\t\t\tAssert.AreEqual({viewModelInstanceName}.{key}, {owningInstanceName}.{key});");
		}
	}
	else
	{
		WriteLine($"\t\t\tAssert.AreEqual({viewModelInstanceName}.Id, this.dataService.{modelName}ViewModels.Single().Id);");
	}
}

private void WriteInvalidIdPath(string modelName)
{
	if (modelsWithCompositeKeys.Keys.Contains(modelName))
	{
		for (int i=0; i < modelsWithCompositeKeys[modelName].Count; ++i)
		{
			Write(Guid.NewGuid().ToString() + "/");
		}
	}
	else
	{
		Write(Guid.NewGuid().ToString());
	}
}

private string GetmodelName(string unitUnderTestName)
{
	return unitUnderTestName.Substring(0, unitUnderTestName.IndexOf("Controller"));
}

private void WriteTests(string unitUnderTestName)
{
	string modelName = GetmodelName(unitUnderTestName);			// "Diagram"
	string viewModelName = modelName + "ViewModel";			// "DiagramViewModel"
	string viewModelInstanceName = Decapitalize(viewModelName); // "diagramViewModel"
	string controllerObjectName = Decapitalize(unitUnderTestName);	// "diagramController"

	WriteCreateTests(unitUnderTestName, modelName, viewModelName, viewModelInstanceName, controllerObjectName);
	WriteUpdateTests(unitUnderTestName, modelName, viewModelName, viewModelInstanceName, controllerObjectName);
	WriteDeleteTests(unitUnderTestName, modelName, viewModelName, viewModelInstanceName, controllerObjectName);
	WriteGetTests(unitUnderTestName, modelName, viewModelName, viewModelInstanceName, controllerObjectName);
}

private void WriteCreateTests(string unitUnderTestName, string modelName, string viewModelName, string viewModelInstanceName, string controllerObjectName)
{
#>

		#region Create
		[TestMethod]
		public void Create<#= modelName #>_ArgumentIsOk_CreatesObjectAndReturns201Created()
		{
<#+
	if (modelName == nameof(Relationship))
	{#>
			var firstCharacter = new CharacterViewModel()
			{
				Id = Guid.NewGuid(),
				Name = "FirstCharacter"
			};
			this.dataService.CharacterViewModels.Add(firstCharacter);

			var secondCharacter = new CharacterViewModel()
			{
				Id = Guid.NewGuid(),
				Name = "SecondCharacter"
			};
			this.dataService.CharacterViewModels.Add(secondCharacter);
<#+	}

#>			// Arrange
			var <#=viewModelInstanceName#> = new <#=viewModelName#>()
			{
<#+
	if (modelName == nameof(Relationship))
	{
#>				FirstCharacterId = firstCharacter.Id,
				SecondCharacterId = secondCharacter.Id,
<#+	}
#>				Name = "New<#=viewModelName#>"
			};
<#+			if (entitiesToAddToDiagram.Contains(modelName))
			{
#>			var diagramViewModel = new DiagramViewModel()
            {
                Name = "Diagram",
                Id = Guid.NewGuid()
            };
            this.dataService.DiagramViewModels.Add(diagramViewModel);
<#+			}#>

			// Act
			var result = (httpClient.PostAsync($"api/<#= modelName #><#+ if (entitiesToAddToDiagram.Contains(modelName)) { #>/{diagramViewModel.Id}<#+}#>", <#=viewModelInstanceName#>.ToJsonStringContent())).Result;

			// Assert
            var content = result.Content.FromJsonString<<#=viewModelName#>>();
			Assert.IsNotNull(result);
            Assert.IsNotNull(content);
			Assert.AreEqual(System.Net.HttpStatusCode.Created, result.StatusCode);
            Assert.AreEqual($"/api/<#=modelName#>/<#=GetIdPath(modelName, "content")#>", result.Headers.Location.PathAndQuery);
			Assert.AreEqual(<#=viewModelInstanceName#>.Name, this.dataService.<#=modelName#>ViewModels.Single().Name);<#+
		WriteKeyAssert(modelName, "content"); 
#>		}

		[TestMethod]
        public void Create<#=modelName#>_WithInvalidModel_Returns400BadRequest()
        {
            // Arrange
<#+			if (entitiesToAddToDiagram.Contains(modelName))
			{#>
			var diagramViewModel = new DiagramViewModel()
            {
                Name = "Diagram",
                Id = Guid.NewGuid()
            };
            this.dataService.DiagramViewModels.Add(diagramViewModel);
<#+			}#>
            
            // Act
<#+ if (modelName == nameof(Relationship))
    {#>
			var result = (httpClient.PostAsync($"api/<#=modelName#><#+ if (entitiesToAddToDiagram.Contains(modelName)) { #>/{diagramViewModel.Id}<#+}#>", (new System.Text.StringBuilder()).ToJsonStringContent())).Result;
<#+	}
	else
	{#>
	        var result = (httpClient.PostAsync($"api/<#=modelName#><#+ if (entitiesToAddToDiagram.Contains(modelName)) { #>/{diagramViewModel.Id}<#+}#>", (new <#=viewModelName#>()).ToJsonStringContent())).Result;
<#+	}#>
            // Assert          
            Assert.AreEqual(System.Net.HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        public void Create<#=modelName#>_WithoutContent_Returns400BadRequest()
        {
            // Arrange
            var httpClient = TestServerHelper.GetTestClient(this.dataService);
<#+			if (entitiesToAddToDiagram.Contains(modelName))
			{#>
			var diagramViewModel = new DiagramViewModel()
            {
                Name = "Diagram",
                Id = Guid.NewGuid()
            };
            this.dataService.DiagramViewModels.Add(diagramViewModel);
<#+			}#>

            // Act
            var result = (httpClient.PostAsync($"api/<#=modelName#><#+ if (entitiesToAddToDiagram.Contains(modelName)) { #>/{diagramViewModel.Id}<#+}#>", null)).Result;

            // Assert          
            Assert.AreEqual(System.Net.HttpStatusCode.BadRequest, result.StatusCode);
        }
		#endregion

<#+
}
#>

<#+
private void WriteUpdateTests(string unitUnderTestName, string modelName, string viewModelName, string viewModelInstanceName, string controllerObjectName)
{
#>
		#region Update
		[TestMethod]
        public void Update<#=modelName#>_ArgumentIsOk_Updates<#=modelName#>AndReturns204NoContent()
        {
            // Arrange
            var <#=viewModelInstanceName#> = new <#=viewModelName#>()
            {
                <#=GetNewIdProperties(modelName, "\t\t\t\t")#>,
                Name = "New<#=modelName#>"
            };

            var updated<#=viewModelName#> = new <#=viewModelName#>()
            {
                <#=GetNewIdProperties(modelName, "\t\t\t\t", viewModelInstanceName)#>,
                Name = "UpdatedNew<#=modelName#>"
            };

            this.dataService.<#=Pluralize(viewModelName)#>.Add(<#=viewModelInstanceName#>);

            // Act
            var result = (httpClient.PutAsync($"api/<#=modelName#>/<#=GetIdPath(modelName, viewModelInstanceName)#>", updated<#=viewModelName#>.ToJsonStringContent())).Result;

            // Assert
            Assert.AreEqual(System.Net.HttpStatusCode.NoContent, result.StatusCode);
			<#+ WriteKeyAssert(modelName, viewModelInstanceName); #>			
            Assert.AreEqual(updated<#=viewModelName#>.Name, this.dataService.<#=Pluralize(viewModelName)#>.Single().Name);
        }

        [TestMethod]
        public void Update<#=modelName#>_ArgumentIsNull_Returns400BadRequest()
        {
            // Arrange
            var <#=viewModelInstanceName#> = new <#=viewModelName#>()
            {
                <#=GetNewIdProperties(modelName, "\t\t\t\t")#>,
                Name = "New<#=modelName#>"
            };

            this.dataService.<#=Pluralize(viewModelName)#>.Add(<#=viewModelInstanceName#>);

            // Act
            var result = (httpClient.PutAsync($"api/<#=modelName#>/<#=GetIdPath(modelName, viewModelInstanceName)#>", string.Empty.ToJsonStringContent())).Result;

            // Assert
            Assert.AreEqual(System.Net.HttpStatusCode.BadRequest, result.StatusCode);
			<#+	WriteKeyAssert(modelName, viewModelInstanceName); #>			
            Assert.AreEqual(<#=viewModelInstanceName#>.Name, this.dataService.<#=Pluralize(viewModelName)#>.Single().Name);
        }

        [TestMethod]
        public void Update<#=modelName#>_IdIsWrong_Returns404NotFound()
        {
            // Arrange
            var <#=viewModelInstanceName#> = new <#=viewModelName#>()
            {
                <#=GetNewIdProperties(modelName, "\t\t\t\t")#>,
                Name = "New<#=modelName#>"
            };

            var updated<#=viewModelName#> = new <#=viewModelName#>()
            {
                <#=GetNewIdProperties(modelName, "\t\t\t\t", viewModelInstanceName)#>,
                Name = "UpdatedNew<#=modelName#>"
            };

            this.dataService.<#=Pluralize(viewModelName)#>.Add(<#=viewModelInstanceName#>);

            // Act
            var result = (httpClient.PutAsync($"api/<#=modelName#>/<#+ WriteInvalidIdPath(modelName); #>", updated<#=viewModelName#>.ToJsonStringContent())).Result;

            // Assert
            Assert.AreEqual(System.Net.HttpStatusCode.NotFound, result.StatusCode);
<#+			WriteKeyAssert(modelName, viewModelInstanceName); #>			
            Assert.AreEqual(<#=viewModelInstanceName#>.Name, this.dataService.<#=Pluralize(viewModelName)#>.Single().Name);
        }
		#endregion

<#+
}
#>

<#+
private void WriteDeleteTests(string unitUnderTestName, string modelName, string viewModelName, string viewModelInstanceName, string controllerObjectName)
{
#>
		#region Delete
		[TestMethod]
        public void Delete<#=modelName#>_IdIsOk_Deletes<#=modelName#>AndReturns204NoContent()
        {
            // Arrange
            var <#=viewModelInstanceName#> = new <#=viewModelName#>()
            {
                <#=GetNewIdProperties(modelName, "\t\t\t\t")#>,
                Name = "New<#=modelName#>"
            };

            this.dataService.<#=Pluralize(viewModelName)#>.Add(<#=viewModelInstanceName#>);

            // Act
            var result = (httpClient.DeleteAsync($"api/<#=modelName#>/<#=GetIdPath(modelName, viewModelInstanceName)#>")).Result;

            // Assert
            Assert.AreEqual(System.Net.HttpStatusCode.NoContent, result.StatusCode);
            Assert.AreEqual(0, this.dataService.<#=Pluralize(viewModelName)#>.Count);
        }
        
        [TestMethod]
        public void Delete<#=modelName#>_IdIsWrong_Returns404NotFound()
        {
            // Arrange
            var <#=viewModelInstanceName#> = new <#=viewModelName#>()
            {
                <#=GetNewIdProperties(modelName, "\t\t\t\t")#>,
                Name = "New<#=modelName#>"
            };

            this.dataService.<#=Pluralize(viewModelName)#>.Add(<#=viewModelInstanceName#>);

            // Act
            var result = (httpClient.DeleteAsync($"api/<#=modelName#>/<#+ WriteInvalidIdPath(modelName); #>")).Result;

            // Assert
            Assert.AreEqual(System.Net.HttpStatusCode.NotFound, result.StatusCode);
			<#+ WriteKeyAssert(modelName, viewModelInstanceName); #>			
            Assert.AreEqual(<#=viewModelInstanceName#>.Name, this.dataService.<#=Pluralize(viewModelName)#>.Single().Name);
        }
		#endregion

<#+
}
#>

<#+
private void WriteGetTests(string unitUnderTestName, string modelName, string viewModelName, string viewModelInstanceName, string controllerObjectName)
{
#>
		#region Get
		[TestMethod]
		public void Get<#= modelName #>_ArgumentIsOk_CreatesObjectAndReturns200Ok()
		{
			// Arrange
            var <#=viewModelInstanceName#> = new <#=viewModelName#>()
			{
				<#=GetNewIdProperties(modelName, "\t\t\t\t")#>,
				Name = "New<#=viewModelName#>"
			};
			this.dataService.<#= modelName #>ViewModels.Add(<#=viewModelInstanceName#>);

            // Act
            var result = (httpClient.GetAsync($"api/<#=modelName#>/<#=GetIdPath(modelName, viewModelInstanceName)#>")).Result;

            // Assert
			var content = result.Content.FromJsonString<<#=viewModelName#>>();
			Assert.IsNotNull(result);
			Assert.IsNotNull(content);
            Assert.AreEqual(System.Net.HttpStatusCode.OK, result.StatusCode);
			<#+ WriteKeyAssert(modelName, viewModelInstanceName, "content"); #>
			Assert.AreEqual(<#=viewModelInstanceName#>.Name, content.Name);
		}

		[TestMethod]
        public void Get<#=modelName#>_WithInvalidId_Returns404NotFound()
        {
            // Arrange
            var <#=viewModelInstanceName#> = new <#=viewModelName#>()
			{
				<#=GetNewIdProperties(modelName, "\t\t\t\t")#>,
				Name = "New<#=viewModelName#>"
			};
			this.dataService.<#= modelName #>ViewModels.Add(<#=viewModelInstanceName#>);

            // Act
            var result = (httpClient.GetAsync("api/<#=modelName#>/<#+ WriteInvalidIdPath(modelName); #>")).Result;

            // Assert
			Assert.IsNotNull(result);
            Assert.AreEqual(System.Net.HttpStatusCode.NotFound, result.StatusCode);
        }
		#endregion

<#+
}
#>