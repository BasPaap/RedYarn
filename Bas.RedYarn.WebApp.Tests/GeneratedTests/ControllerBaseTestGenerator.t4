<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="$(SolutionDir)\Bas.RedYarn.WebApp\bin\Debug\netcoreapp2.1\Bas.RedYarn.WebApp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Bas.RedYarn.WebApp" #>
<#@ import namespace="Bas.RedYarn.WebApp.Controllers" #>
<#@ output extension=".cs" #><#+

private void WriteBeginning(string unitUnderTestName)
{
#>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bas.RedYarn.WebApp.ViewModels;

namespace Bas.RedYarn.WebApp.Tests
{
    public partial class <#= unitUnderTestName #>Test
    {
		private readonly TestDataService dataService = new TestDataService();
        private <#= unitUnderTestName #> <#= Decapitalize(unitUnderTestName) #>;

        [TestInitialize]
        public void Initialize()
        {
            this.<#= Decapitalize(unitUnderTestName)#> = new <#= unitUnderTestName #>(dataService);
        }
<#+
}

private void WriteEnd()
{
#>
	}
}
<#+
}

private string Decapitalize(string capitalizedString)
{
	return Char.ToLowerInvariant(capitalizedString[0]) + capitalizedString.Substring(1);
}

private string GetSubjectName(string unitUnderTestName)
{
	return unitUnderTestName.SubString(0, unitUnderTestName.IndexOf("Controller"));
}
private void WriteTests(string unitUnderTestName)
{
	string subjectName = GetSubjectName(unitUnderTestName);
	string subjectObjectName = Decapitalize(subjectName);
	string controllerObjectName = Decapitalize(subjectUnderTestName);

	WriteCreateTests(subjectName, subjectObjectName, controllerObjectName);
	WriteUpdateTests(subjectName, subjectObjectName, controllerObjectName);
	WriteDeleteTests(subjectName, subjectObjectName, controllerObjectName);
	WriteGetTests(subjectName, subjectObjectName, controllerObjectName);
}

private void WriteCreateTests(string subjectName, string subjectObjectName, string controllerObjectName)
{
#>
		#region Create
		[TestMethod]
		public void Create<#= subjectName #>_ArgumentIsNull_Returns400BadRequest()
		{
			// Arrange
			// Act
			var result = this.<#= controllerObjectName #>.Create<#= subjectName #>Async(null);
			
			// Assert
			Assert.IsInstanceOfType(result, typeof(BadRequestResult));
		}

		#region Create
		[TestMethod]
		public void Create<#= subjectName #>_ArgumentIsOk_Returns201Created()
		{
			// Arrange

			// Act
			var result = this.<#= controllerObjectName #>.Create<#= subjectName #>Async(null);
			
			// Assert
			Assert.IsInstanceOfType(result, typeof(CreatedAtResult));
			// Wijst naar juiste url
			AssertCreatedD<#= subjectName #>(result);
		}

		#endregion
<#+
}
#>

<#+
private void WriteUpdateTests(string subjectName, string subjectObjectName, string controllerObjectName)
{
#>
		#region Update
		[TestMethod]
		public void Create<#= subjectName #>_ArgumentIsNull_Returns400BadRequest()
		{
			// Arrange
			// Act
			var result = this.<#= controllerObjectName #>.Create<#= subjectName #>Async(null);
			
			// Assert
			Assert.IsInstanceOfType(result, typeof(BadRequestResult));
		}

		#region Create
		[TestMethod]
		public void Create<#= subjectName #>_ArgumentIsOk_Returns201Created()
		{
			// Arrange

			// Act
			var result = this.<#= controllerObjectName #>.Create<#= subjectName #>Async(null);
			
			// Assert
			Assert.IsInstanceOfType(result, typeof(CreatedAtResult));
			// Wijst naar juiste url
			// nieuwe entiteit bestaat in dataservice.
		}

		#endregion
<#+
}
#>

<#+
private void WriteDeleteTests(string subjectName, string subjectObjectName, string controllerObjectName)
{
#>
		#region Create
		[TestMethod]
		public void Create<#= subjectName #>_ArgumentIsNull_Returns400BadRequest()
		{
			// Arrange
			// Act
			var result = this.<#= controllerObjectName #>.Create<#= subjectName #>Async(null);
			
			// Assert
			Assert.IsInstanceOfType(result, typeof(BadRequestResult));
		}

		#region Create
		[TestMethod]
		public void Create<#= subjectName #>_ArgumentIsOk_Returns201Created()
		{
			// Arrange

			// Act
			var result = this.<#= controllerObjectName #>.Create<#= subjectName #>Async(null);
			
			// Assert
			Assert.IsInstanceOfType(result, typeof(CreatedAtResult));
			// Wijst naar juiste url
			// nieuwe entiteit bestaat in dataservice.
		}

		#endregion
<#+
}
#>

<#+
private void WriteGetTests(string subjectName, string subjectObjectName, string controllerObjectName)
{
#>
		#region Get
		[TestMethod]
		public void Create<#= subjectName #>_ArgumentIsNull_Returns400BadRequest()
		{
			// Arrange
			// Act
			var result = this.<#= controllerObjectName #>.Create<#= subjectName #>Async(null);
			
			// Assert
			Assert.IsInstanceOfType(result, typeof(BadRequestResult));
		}

		#region Create
		[TestMethod]
		public void Create<#= subjectName #>_ArgumentIsOk_Returns201Created()
		{
			// Arrange

			// Act
			var result = this.<#= controllerObjectName #>.Create<#= subjectName #>Async(null);
			
			// Assert
			Assert.IsInstanceOfType(result, typeof(CreatedAtResult));
			// Wijst naar juiste url
			// nieuwe entiteit bestaat in dataservice.
		}

		#endregion
<#+
}
#>