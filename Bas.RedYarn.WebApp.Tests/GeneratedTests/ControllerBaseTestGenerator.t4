<#@ include file="$(SolutionDir)common.t4" #><#+
private void WriteTestClass(string unitUnderTestName)
{
	var controllerName = $"{unitUnderTestName}Controller";
	WriteBeginning(controllerName);
	WriteTests(controllerName);
	WriteEnd();
}

private void WriteBeginning(string unitUnderTestName)
{
#>using Bas.RedYarn.WebApp.Tests.Extensions;
using Bas.RedYarn.WebApp.Tests.Helpers;
using Bas.RedYarn.WebApp.Tests.Services;
using Bas.RedYarn.WebApp.ViewModels;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Linq;
using System.Net.Http;

namespace Bas.RedYarn.WebApp.Tests
{
    public partial class <#= unitUnderTestName #>Test
    {
		private TestDataService dataService;
        private HttpClient httpClient;
		
        [TestInitialize]
        public void Initialize()
        {
			this.dataService = new TestDataService();
			this.httpClient = TestServerHelper.GetTestClient(this.dataService);
        }
<#+
}

private void WriteEnd()
{
#>
	}
}
<#+
}

private string GetSubjectName(string unitUnderTestName)
{
	return unitUnderTestName.Substring(0, unitUnderTestName.IndexOf("Controller"));
}

private void WriteTests(string unitUnderTestName)
{
	string subjectName = GetSubjectName(unitUnderTestName);			// "Diagram"
	string viewModelTypeName = subjectName + "ViewModel";			// "DiagramViewModel"
	string viewModelInstanceName = Decapitalize(viewModelTypeName); // "diagramViewModel"
	string controllerObjectName = Decapitalize(unitUnderTestName);	// "diagramController"

	WriteCreateTests(unitUnderTestName, subjectName, viewModelTypeName, viewModelInstanceName, controllerObjectName);
	WriteUpdateTests(unitUnderTestName, subjectName, viewModelTypeName, viewModelInstanceName, controllerObjectName);
	WriteDeleteTests(unitUnderTestName, subjectName, viewModelTypeName, viewModelInstanceName, controllerObjectName);
	WriteGetTests(unitUnderTestName, subjectName, viewModelTypeName, viewModelInstanceName, controllerObjectName);
}

private void WriteCreateTests(string unitUnderTestName, string subjectName, string viewModelTypeName, string viewModelInstanceName, string controllerObjectName)
{
#>

		#region Create
		[TestMethod]
		public void Create<#= subjectName #>_ArgumentIsOk_CreatesObjectAndReturns201Created()
		{
			// Arrange
			var <#=viewModelInstanceName#> = new <#=viewModelTypeName#>()
			{
				Name = "New<#=viewModelTypeName#>"
			};

			// Act
			var result = (httpClient.PostAsync("api/<#= subjectName #>", <#=viewModelInstanceName#>.ToJsonStringContent())).Result;

			// Assert
            var content = result.Content.FromJsonString<<#=viewModelTypeName#>>();
			Assert.IsNotNull(result);
            Assert.IsNotNull(content);
			Assert.AreEqual(System.Net.HttpStatusCode.Created, result.StatusCode);
            Assert.AreEqual($"/api/<#=subjectName#>/{content.Id.ToString()}", result.Headers.Location.PathAndQuery);
			Assert.AreEqual(<#=viewModelInstanceName#>.Name, this.dataService.<#=subjectName#>ViewModels.Single().Name);
            Assert.AreEqual(content.Id, this.dataService.<#=subjectName#>ViewModels.Single().Id);
		}

		[TestMethod]
        public void Create<#=subjectName#>_WithInvalidModel_Returns400BadRequest()
        {
            // Arrange
            
            // Act
            var result = (httpClient.PostAsync("api/<#=subjectName#>", (new <#=viewModelTypeName#>()).ToJsonStringContent())).Result;

            // Assert          
            Assert.AreEqual(System.Net.HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        public void Create<#=subjectName#>_WithoutContent_Returns400BadRequest()
        {
            // Arrange
            var httpClient = TestServerHelper.GetTestClient(this.dataService);

            // Act
            var result = (httpClient.PostAsync("api/<#=subjectName#>", null)).Result;

            // Assert          
            Assert.AreEqual(System.Net.HttpStatusCode.BadRequest, result.StatusCode);
        }
		#endregion

<#+
}
#>

<#+
private void WriteUpdateTests(string unitUnderTestName, string subjectName, string viewModelTypeName, string viewModelInstanceName, string controllerObjectName)
{
#>
		#region Update
		[TestMethod]
        public void Update<#=subjectName#>_ArgumentIsOk_Updates<#=subjectName#>AndReturns204NoContent()
        {
            // Arrange
            var <#=viewModelInstanceName#> = new <#=viewModelTypeName#>()
            {
                Id = Guid.NewGuid(),
                Name = "New<#=subjectName#>"
            };

            var updated<#=viewModelTypeName#> = new <#=viewModelTypeName#>()
            {
                Id = <#=viewModelInstanceName#>.Id,
                Name = "UpdatedNew<#=subjectName#>"
            };

            this.dataService.<#=viewModelTypeName#>s.Add(<#=viewModelInstanceName#>);

            // Act
            var result = (httpClient.PutAsync($"api/<#=subjectName#>/{<#=viewModelInstanceName#>.Id}", updated<#=viewModelTypeName#>.ToJsonStringContent())).Result;

            // Assert
            Assert.AreEqual(System.Net.HttpStatusCode.NoContent, result.StatusCode);
            Assert.AreEqual(<#=viewModelInstanceName#>.Id, this.dataService.<#=viewModelTypeName#>s.Single().Id);
            Assert.AreEqual(updated<#=viewModelTypeName#>.Name, this.dataService.<#=viewModelTypeName#>s.Single().Name);
        }

        [TestMethod]
        public void Update<#=subjectName#>_ArgumentIsNull_Returns400BadRequest()
        {
            // Arrange
            var <#=viewModelInstanceName#> = new <#=viewModelTypeName#>()
            {
                Id = Guid.NewGuid(),
                Name = "New<#=subjectName#>"
            };

            this.dataService.<#=viewModelTypeName#>s.Add(<#=viewModelInstanceName#>);

            // Act
            var result = (httpClient.PutAsync($"api/<#=subjectName#>/{<#=viewModelInstanceName#>.Id}", string.Empty.ToJsonStringContent())).Result;

            // Assert
            Assert.AreEqual(System.Net.HttpStatusCode.BadRequest, result.StatusCode);
            Assert.AreEqual(<#=viewModelInstanceName#>.Id, this.dataService.<#=viewModelTypeName#>s.Single().Id);
            Assert.AreEqual(<#=viewModelInstanceName#>.Name, this.dataService.<#=viewModelTypeName#>s.Single().Name);
        }

        [TestMethod]
        public void Update<#=subjectName#>_IdIsWrong_Returns404NotFound()
        {
            // Arrange
            var <#=viewModelInstanceName#> = new <#=viewModelTypeName#>()
            {
                Id = Guid.NewGuid(),
                Name = "New<#=subjectName#>"
            };

            var updated<#=viewModelTypeName#> = new <#=viewModelTypeName#>()
            {
                Id = <#=viewModelInstanceName#>.Id,
                Name = "UpdatedNew<#=subjectName#>"
            };

            this.dataService.<#=viewModelTypeName#>s.Add(<#=viewModelInstanceName#>);

            // Act
            var result = (httpClient.PutAsync($"api/<#=subjectName#>/4ECDD1BB-28D8-49FC-BF6D-CB4AA4716B1A", updated<#=viewModelTypeName#>.ToJsonStringContent())).Result;

            // Assert
            Assert.AreEqual(System.Net.HttpStatusCode.NotFound, result.StatusCode);
            Assert.AreEqual(<#=viewModelInstanceName#>.Id, this.dataService.<#=viewModelTypeName#>s.Single().Id);
            Assert.AreEqual(<#=viewModelInstanceName#>.Name, this.dataService.<#=viewModelTypeName#>s.Single().Name);
        }
		#endregion

<#+
}
#>

<#+
private void WriteDeleteTests(string unitUnderTestName, string subjectName, string viewModelTypeName, string viewModelInstanceName, string controllerObjectName)
{
#>
		#region Delete
		[TestMethod]
        public void Delete<#=subjectName#>_IdIsOk_Deletes<#=subjectName#>AndReturns204NoContent()
        {
            // Arrange
            var <#=viewModelInstanceName#> = new <#=viewModelTypeName#>()
            {
                Id = Guid.NewGuid(),
                Name = "New<#=subjectName#>"
            };

            this.dataService.<#=viewModelTypeName#>s.Add(<#=viewModelInstanceName#>);

            // Act
            var result = (httpClient.DeleteAsync($"api/<#=subjectName#>/{<#=viewModelInstanceName#>.Id}")).Result;

            // Assert
            Assert.AreEqual(System.Net.HttpStatusCode.NoContent, result.StatusCode);
            Assert.AreEqual(0, this.dataService.<#=viewModelTypeName#>s.Count);
        }
        
        [TestMethod]
        public void Delete<#=subjectName#>_IdIsWrong_Returns404NotFound()
        {
            // Arrange
            var <#=viewModelInstanceName#> = new <#=viewModelTypeName#>()
            {
                Id = Guid.NewGuid(),
                Name = "New<#=subjectName#>"
            };

            this.dataService.<#=viewModelTypeName#>s.Add(<#=viewModelInstanceName#>);

            // Act
            var result = (httpClient.DeleteAsync($"api/<#=subjectName#>/4ECDD1BB-28D8-49FC-BF6D-CB4AA4716B1A")).Result;

            // Assert
            Assert.AreEqual(System.Net.HttpStatusCode.NotFound, result.StatusCode);
            Assert.AreEqual(<#=viewModelInstanceName#>.Id, this.dataService.<#=viewModelTypeName#>s.Single().Id);
            Assert.AreEqual(<#=viewModelInstanceName#>.Name, this.dataService.<#=viewModelTypeName#>s.Single().Name);
        }
		#endregion

<#+
}
#>

<#+
private void WriteGetTests(string unitUnderTestName, string subjectName, string viewModelTypeName, string viewModelInstanceName, string controllerObjectName)
{
#>
		#region Get
		[TestMethod]
		public void Get<#= subjectName #>_ArgumentIsOk_CreatesObjectAndReturns200Ok()
		{
			// Arrange
            var <#=viewModelInstanceName#> = new <#=viewModelTypeName#>()
			{
				Id = Guid.NewGuid(),
				Name = "New<#=viewModelTypeName#>"
			};
			this.dataService.<#= subjectName #>ViewModels.Add(<#=viewModelInstanceName#>);

            // Act
            var result = (httpClient.GetAsync($"api/<#=subjectName#>/{<#=viewModelInstanceName#>.Id}")).Result;

            // Assert
			var content = result.Content.FromJsonString<<#=viewModelTypeName#>>();
			Assert.IsNotNull(result);
			Assert.IsNotNull(content);
            Assert.AreEqual(System.Net.HttpStatusCode.OK, result.StatusCode);
			Assert.AreEqual(<#=viewModelInstanceName#>.Id, content.Id);
			Assert.AreEqual(<#=viewModelInstanceName#>.Name, content.Name);
		}

		[TestMethod]
        public void Get<#=subjectName#>_WithInvalidId_Returns404NotFound()
        {
            // Arrange
            var <#=viewModelInstanceName#> = new <#=viewModelTypeName#>()
			{
				Id = Guid.NewGuid(),
				Name = "New<#=viewModelTypeName#>"
			};
			this.dataService.<#= subjectName #>ViewModels.Add(<#=viewModelInstanceName#>);

            // Act
            var result = (httpClient.GetAsync("api/<#=subjectName#>/28BABB19-2A14-421D-9147-26F1D0903F5A")).Result;

            // Assert
			Assert.IsNotNull(result);
            Assert.AreEqual(System.Net.HttpStatusCode.NotFound, result.StatusCode);
        }
		#endregion

<#+
}
#>