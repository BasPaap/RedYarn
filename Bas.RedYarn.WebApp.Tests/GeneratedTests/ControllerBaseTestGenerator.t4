<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="$(SolutionDir)\Bas.RedYarn.WebApp\bin\Debug\netcoreapp2.1\Bas.RedYarn.WebApp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Bas.RedYarn.WebApp" #>
<#@ import namespace="Bas.RedYarn.WebApp.Controllers" #>
<#@ output extension=".cs" #><#+

private void WriteBeginning(string unitUnderTestName)
{
#>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using Bas.RedYarn.WebApp.Controllers;
using Bas.RedYarn.WebApp.Tests.Services;
using Bas.RedYarn.WebApp.ViewModels;

namespace Bas.RedYarn.WebApp.Tests
{
    public partial class <#= unitUnderTestName #>Test
    {
		private TestDataService dataService;
        private <#= unitUnderTestName #> <#= Decapitalize(unitUnderTestName) #>;

        [TestInitialize]
        public void Initialize()
        {
			this.dataService = new TestDataService();
            this.<#= Decapitalize(unitUnderTestName)#> = new <#= unitUnderTestName #>(this.dataService);
        }
<#+
}

private void WriteEnd()
{
#>
	}
}
<#+
}

private string Decapitalize(string capitalizedString)
{
	return Char.ToLowerInvariant(capitalizedString[0]) + capitalizedString.Substring(1);
}

private string GetSubjectName(string unitUnderTestName)
{
	return unitUnderTestName.Substring(0, unitUnderTestName.IndexOf("Controller"));
}

private void WriteTests(string unitUnderTestName)
{
	string subjectName = GetSubjectName(unitUnderTestName);			// "Diagram"
	string viewModelTypeName = subjectName + "ViewModel";			// "DiagramViewModel"
	string viewModelInstanceName = Decapitalize(viewModelTypeName); // "diagramViewModel"
	string controllerObjectName = Decapitalize(unitUnderTestName);	// "diagramController"

	WriteCreateTests(unitUnderTestName, subjectName, viewModelTypeName, viewModelInstanceName, controllerObjectName);
	WriteUpdateTests(unitUnderTestName, subjectName, viewModelTypeName, viewModelInstanceName, controllerObjectName);
	WriteDeleteTests(unitUnderTestName, subjectName, viewModelTypeName, viewModelInstanceName, controllerObjectName);
	WriteGetTests(unitUnderTestName, subjectName, viewModelTypeName, viewModelInstanceName, controllerObjectName);
}

private void WriteCreateTests(string unitUnderTestName, string subjectName, string viewModelTypeName, string viewModelInstanceName, string controllerObjectName)
{
#>

		#region Create
		[TestMethod]
		public void Create<#= subjectName #>_ArgumentIsNull_Returns400BadRequest()
		{
			// Arrange
			// Act
			var result = this.<#= controllerObjectName #>.Create<#= subjectName #>Async(null);
			
			// Assert
			Assert.IsInstanceOfType(result, typeof(BadRequestResult));
		}

		[TestMethod]
		public void Create<#= subjectName #>_ModelIsInvalud_Returns400BadRequest()
		{
			// Arrange
			var <#= viewModelInstanceName #> = new <#= viewModelTypeName #>()
			{
				Name = ""
			};

			// Act
			var result = this.<#= controllerObjectName #>.Create<#= subjectName #>Async(<#=viewModelInstanceName#>);
			
			// Assert
			Assert.IsInstanceOfType(result, typeof(BadRequestResult));
		}
		
		[TestMethod]
		public void Create<#= subjectName #>_ArgumentIsOk_Returns201Created()
		{
			// Arrange

			// Act
			var result = ((this.<#= controllerObjectName #>.Create<#= subjectName #>Async(null)).Result.Result) as CreatedAtActionResult;
			
			// Assert
			Assert.IsNotNull(result);
			Assert.AreEqual(201, (int)result.StatusCode);
			Assert.AreEqual(nameof(<#= unitUnderTestName #>), result.ControllerName);
			Assert.AreEqual(nameof(<#= unitUnderTestName #>.Get<#= subjectName #>ViewModel), result.ActionName);
			Assert.IsInstanceOfType(result.Value, typeof(<#= viewModelTypeName #>));
			Assert.IsNotNull(result.RouteValues["id"]);
			Assert.AreEqual((result.Value as <#=viewModelTypeName#>).Id, (Guid)result.RouteValues["id"]);
			AssertCreated<#= subjectName #>(result.Value as <#=viewModelTypeName#>);
		}

		#endregion

<#+
}
#>

<#+
private void WriteUpdateTests(string unitUnderTestName, string subjectName, string viewModelTypeName, string viewModelInstanceName, string controllerObjectName)
{
#>
		#region Update
		
		#endregion

<#+
}
#>

<#+
private void WriteDeleteTests(string unitUnderTestName, string subjectName, string viewModelTypeName, string viewModelInstanceName, string controllerObjectName)
{
#>
		#region Delete
		
		#endregion

<#+
}
#>

<#+
private void WriteGetTests(string unitUnderTestName, string subjectName, string viewModelTypeName, string viewModelInstanceName, string controllerObjectName)
{
#>
		#region Get
		
		#endregion

<#+
}
#>