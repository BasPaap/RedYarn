<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="$(SolutionDir)\Bas.RedYarn.WebApp\bin\Debug\netcoreapp2.1\Bas.RedYarn.WebApp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Bas.RedYarn.WebApp" #>
<#@ import namespace="Bas.RedYarn.WebApp.Controllers" #>
<#@ output extension=".cs" #><#+

private void WriteBeginning(string unitUnderTestName)
{
#>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

using Bas.RedYarn.WebApp.Tests.Extensions;
using Bas.RedYarn.WebApp.Tests.Helpers;
using Bas.RedYarn.WebApp.Tests.Services;
using Bas.RedYarn.WebApp.ViewModels;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Net.Http;

namespace Bas.RedYarn.WebApp.Tests
{
    public partial class <#= unitUnderTestName #>Test
    {
		private TestDataService dataService;
        private HttpClient httpClient;

		public <#= unitUnderTestName #>Test()
		{
			this.httpClient = TestServerHelper.GetTestClient(this.dataService);
		}

        [TestInitialize]
        public void Initialize()
        {
			this.dataService = new TestDataService();
        }
<#+
}

private void WriteEnd()
{
#>
	}
}
<#+
}

private string Decapitalize(string capitalizedString)
{
	return Char.ToLowerInvariant(capitalizedString[0]) + capitalizedString.Substring(1);
}

private string GetSubjectName(string unitUnderTestName)
{
	return unitUnderTestName.Substring(0, unitUnderTestName.IndexOf("Controller"));
}

private void WriteTests(string unitUnderTestName)
{
	string subjectName = GetSubjectName(unitUnderTestName);			// "Diagram"
	string viewModelTypeName = subjectName + "ViewModel";			// "DiagramViewModel"
	string viewModelInstanceName = Decapitalize(viewModelTypeName); // "diagramViewModel"
	string controllerObjectName = Decapitalize(unitUnderTestName);	// "diagramController"

	WriteCreateTests(unitUnderTestName, subjectName, viewModelTypeName, viewModelInstanceName, controllerObjectName);
	WriteUpdateTests(unitUnderTestName, subjectName, viewModelTypeName, viewModelInstanceName, controllerObjectName);
	WriteDeleteTests(unitUnderTestName, subjectName, viewModelTypeName, viewModelInstanceName, controllerObjectName);
	WriteGetTests(unitUnderTestName, subjectName, viewModelTypeName, viewModelInstanceName, controllerObjectName);
}

private void WriteCreateTests(string unitUnderTestName, string subjectName, string viewModelTypeName, string viewModelInstanceName, string controllerObjectName)
{
#>

		#region Create
		[TestMethod]
		public void Create<#= subjectName #>_ArgumentIsOk_CreatesObjectAndReturns201Created()
		{
			// Arrange
			var <#=viewModelInstanceName#> = new <#=viewModelTypeName#>()
			{
				Name = "New<#=viewModelTypeName#>"
			};

			// Act
			var result = (httpClient.PostAsync("api/<#= subjectName #>", <#=viewModelInstanceName#>.ToJsonStringContent())).Result;

			// Assert
            var content = result.Content.FromJsonString<<#=viewModelTypeName#>>();
			Assert.IsNotNull(result);
            Assert.IsNotNull(content);
			Assert.AreEqual(System.Net.HttpStatusCode.Created, result.StatusCode);
            Assert.AreEqual($"/api/<#=subjectName#>?id={content.Id.ToString()}", result.Headers.Location.PathAndQuery);
            AssertCreated<#= subjectName #>(content);
		}

		[TestMethod]
        public void <#=subjectName#>Create_WithInvalidModel_Returns400BadRequest()
        {
            // Arrange
            
            // Act
            var result = (httpClient.PostAsync("api/<#=subjectName#>", (new <#=viewModelTypeName#>()).ToJsonStringContent())).Result;

            // Assert          
            Assert.AreEqual(System.Net.HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        public void <#=subjectName#>Create_WithoutContent_Returns400BadRequest()
        {
            // Arrange
            var httpClient = TestServerHelper.GetTestClient(this.dataService);

            // Act
            var result = (httpClient.PostAsync("api/<#=subjectName#>", null)).Result;

            // Assert          
            Assert.AreEqual(System.Net.HttpStatusCode.BadRequest, result.StatusCode);
        }


		#endregion

<#+
}
#>

<#+
private void WriteUpdateTests(string unitUnderTestName, string subjectName, string viewModelTypeName, string viewModelInstanceName, string controllerObjectName)
{
#>
		#region Update
		
		#endregion

<#+
}
#>

<#+
private void WriteDeleteTests(string unitUnderTestName, string subjectName, string viewModelTypeName, string viewModelInstanceName, string controllerObjectName)
{
#>
		#region Delete
		
		#endregion

<#+
}
#>

<#+
private void WriteGetTests(string unitUnderTestName, string subjectName, string viewModelTypeName, string viewModelInstanceName, string controllerObjectName)
{
#>
		#region Get
		
		#endregion

<#+
}
#>