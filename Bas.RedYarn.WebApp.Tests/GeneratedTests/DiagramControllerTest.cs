//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

using Bas.RedYarn.WebApp.Tests.Extensions;
using Bas.RedYarn.WebApp.Tests.Helpers;
using Bas.RedYarn.WebApp.Tests.Services;
using Bas.RedYarn.WebApp.ViewModels;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Net.Http;

namespace Bas.RedYarn.WebApp.Tests
{
    public partial class DiagramControllerTest
    {
		private TestDataService dataService;
        private HttpClient httpClient;

		public DiagramControllerTest()
		{
			this.httpClient = TestServerHelper.GetTestClient(this.dataService);
		}

        [TestInitialize]
        public void Initialize()
        {
			this.dataService = new TestDataService();
        }

		#region Create
		[TestMethod]
		public void CreateDiagram_ArgumentIsOk_CreatesObjectAndReturns201Created()
		{
			// Arrange
			var diagramViewModel = new DiagramViewModel()
			{
				Name = "NewDiagramViewModel"
			};

			// Act
			var result = (httpClient.PostAsync("api/Diagram", diagramViewModel.ToJsonStringContent())).Result;

			// Assert
            var content = result.Content.FromJsonString<DiagramViewModel>();
			Assert.IsNotNull(result);
            Assert.IsNotNull(content);
			Assert.AreEqual(System.Net.HttpStatusCode.Created, result.StatusCode);
            Assert.AreEqual($"/api/Diagram?id={content.Id.ToString()}", result.Headers.Location.PathAndQuery);
            AssertCreatedDiagram(content);
		}

		[TestMethod]
        public void DiagramCreate_WithInvalidModel_Returns400BadRequest()
        {
            // Arrange
            
            // Act
            var result = (httpClient.PostAsync("api/Diagram", (new DiagramViewModel()).ToJsonStringContent())).Result;

            // Assert          
            Assert.AreEqual(System.Net.HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        public void DiagramCreate_WithoutContent_Returns400BadRequest()
        {
            // Arrange
            var httpClient = TestServerHelper.GetTestClient(this.dataService);

            // Act
            var result = (httpClient.PostAsync("api/Diagram", null)).Result;

            // Assert          
            Assert.AreEqual(System.Net.HttpStatusCode.BadRequest, result.StatusCode);
        }


		#endregion

		#region Update
		
		#endregion

		#region Delete
		
		#endregion

		#region Get
		
		#endregion

	}
}
