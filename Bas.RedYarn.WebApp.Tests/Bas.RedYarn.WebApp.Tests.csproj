<!-- Because we need to control the order in which sdk.targets and texttemplating.targets are imported, the Sdk attribute on the <Project> element is removed:
     This attribute would implicitly import sdk.targets at the end of the project file, which would generate a build warning because we already import it here 
     in the project file. As such, we are explicitly importing Sdk.props from the Microsoft.NET.Sdk.Web SDK at the top of the project file, and explicitly 
     importing sdk.targets right before we import texttemplating.targets at the end of the project file.
     See this article: https://www.thomaslevesque.com/2017/11/13/transform-t4-templates-as-part-of-the-build-and-pass-variables-from-the-project/
     and this comment: https://www.thomaslevesque.com/2017/11/13/transform-t4-templates-as-part-of-the-build-and-pass-variables-from-the-project/#comment-91621
     for more information. Documentation on implicityly or explicitly referencing Sdk's is here: https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-use-project-sdk?view=vs-2017
     (note that the SDK path is likely C:\Program Files\dotnet\sdk\2.1.403\Sdks\{value of the Sdk attribute, i.e. Microsoft.NET.Sdk.Web}\Sdk.)-->
<Project>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <TargetFramework>netcoreapp2.1</TargetFramework>

    <IsPackable>false</IsPackable>
  </PropertyGroup>

  <!-- This PropertyGroup allows the transform of T4 templates on build. Note that VisualStudioVersion needs to equal the VS version being used to build this! -->
  <PropertyGroup>
    <VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">15.0</VisualStudioVersion>
    <VSToolsPath Condition="'$(VSToolsPath)' == ''">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
  </PropertyGroup>

  <!-- This itemgroup is required to expand the $(SolutionDir) and $(Configuration) variables on build.
       This is because the MSBuild target that transforms the template and the TextTemplatingFileGenerator used in VS don't
       use the same transformation engine, and the MSBuild one doesn't automatically recognize MSBuild properties...
       See also: https://www.thomaslevesque.com/2017/11/13/transform-t4-templates-as-part-of-the-build-and-pass-variables-from-the-project/
  -->

  <ItemGroup>
    <T4ParameterValues Include="SolutionDir">
      <Value>$(SolutionDir)</Value>
      <Visible>False</Visible>
    </T4ParameterValues>
    <T4ParameterValues Include="Configuration">
      <Value>$(Configuration)</Value>
      <Visible>False</Visible>
    </T4ParameterValues>
  </ItemGroup>

  <PropertyGroup>
    <TransformOnBuild>true</TransformOnBuild>
  </PropertyGroup>


  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Diagnostics" Version="2.1.1" />
    <PackageReference Include="Microsoft.AspNetCore.HttpsPolicy" Version="2.1.1" />
    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.1.3" />
    <PackageReference Include="Microsoft.AspNetCore.TestHost" Version="2.1.1" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="2.1.4" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="2.1.1" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.9.0" />
    <PackageReference Include="MSTest.TestAdapter" Version="1.4.0" />
    <PackageReference Include="MSTest.TestFramework" Version="1.4.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Bas.RedYarn.WebApp.Database\Bas.RedYarn.WebApp.Database.csproj" />
    <ProjectReference Include="..\Bas.RedYarn.WebApp\Bas.RedYarn.WebApp.csproj" />
    <ProjectReference Include="..\Bas.RedYarn\Bas.RedYarn.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Reference Include="Microsoft.AspNetCore.Hosting">
      <HintPath>..\..\..\..\..\..\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.aspnetcore.hosting\2.1.1\lib\netstandard2.0\Microsoft.AspNetCore.Hosting.dll</HintPath>
    </Reference>
  </ItemGroup>

  <ItemGroup>
    <None Update="GeneratedTests\AliasControllerTest.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>AliasControllerTest.cs</LastGenOutput>
    </None>
    <None Update="GeneratedTests\CharacterPlotElementConnectionControllerTest.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>CharacterPlotElementConnectionControllerTest.cs</LastGenOutput>
    </None>
    <None Update="GeneratedTests\DatabaseDataServiceTest.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>DatabaseDataServiceTest.cs</LastGenOutput>
    </None>
    <None Update="GeneratedTests\AuthorControllerTest.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>AuthorControllerTest.cs</LastGenOutput>
    </None>
    <None Update="GeneratedTests\CharacterControllerTest.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>CharacterControllerTest.cs</LastGenOutput>
    </None>
    <None Update="GeneratedTests\DatabaseDataServiceTestBase.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>DatabaseDataServiceTestBase.cs</LastGenOutput>
    </None>
    <None Update="GeneratedTests\DiagramControllerTest.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>DiagramControllerTest.cs</LastGenOutput>
    </None>
    <None Update="GeneratedTests\RelationshipControllerTest.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>RelationshipControllerTest.cs</LastGenOutput>
    </None>
    <None Update="GeneratedTests\StorylineControllerTest.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>StorylineControllerTest.cs</LastGenOutput>
    </None>
    <None Update="Services\TestDataService.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>TestDataService.cs</LastGenOutput>
    </None>
    <None Update="GeneratedTests\StorylineCharacterConnectionControllerTest.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>StorylineCharacterConnectionControllerTest.cs</LastGenOutput>
    </None>
    <None Update="GeneratedTests\StorylinePlotElementConnectionControllerTest.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>StorylinePlotElementConnectionControllerTest.cs</LastGenOutput>
    </None>
  </ItemGroup>

  <ItemGroup>
    <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
  </ItemGroup>


  <!-- These generated files need to be included in the compilation, but adding them with the Include option here will
       generate a build error if the files already exist on disk - because then MSBuild will already have included them
       implicitly. Therefore, we only include these here with the condition that they do not yet exist on disk. -->
  <ItemGroup>
    <Compile Condition="!Exists('GeneratedTests\AliasControllerTest.cs')" Include="GeneratedTests\AliasControllerTest.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>AliasControllerTest.tt</DependentUpon>
    </Compile>
    <Compile Condition="!Exists('GeneratedTests\AuthorControllerTest.cs')" Include="GeneratedTests\AuthorControllerTest.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>AuthorControllerTest.tt</DependentUpon>
    </Compile>
    <Compile Condition="!Exists('GeneratedTests\CharacterControllerTest.cs')" Include="GeneratedTests\CharacterControllerTest.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>CharacterControllerTest.tt</DependentUpon>
    </Compile>
    <Compile Condition="!Exists('GeneratedTests\CharacterPlotElementConnectionControllerTest.cs')" Include="GeneratedTests\CharacterPlotElementConnectionControllerTest.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>CharacterPlotElementConnectionControllerTest.tt</DependentUpon>
    </Compile>
    <Compile Condition="!Exists('GeneratedTests\DatabaseDataServiceTestBase.cs')" Include="GeneratedTests\DatabaseDataServiceTestBase.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>DatabaseDataServiceTestBase.tt</DependentUpon>
    </Compile>
    <Compile Condition="!Exists('GeneratedTests\DiagramControllerTest.cs')" Include="GeneratedTests\DiagramControllerTest.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>DiagramControllerTest.tt</DependentUpon>
    </Compile>
    <Compile Condition="!Exists('GeneratedTests\RelationshipControllerTest.cs')" Include="GeneratedTests\RelationshipControllerTest.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>RelationshipControllerTest.tt</DependentUpon>
    </Compile>
    <Compile Condition="!Exists('GeneratedTests\StorylineControllerTest.cs')" Include="GeneratedTests\StorylineControllerTest.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>StorylineControllerTest.tt</DependentUpon>
    </Compile>
    <Compile Condition="!Exists('GeneratedTests\StorylineCharacterConnectionControllerTest.cs')" Include="GeneratedTests\StorylineCharacterConnectionControllerTest.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>StorylineCharacterConnectionControllerTest.tt</DependentUpon>
    </Compile>
    <Compile Condition="!Exists('GeneratedTests\StorylinePlotElementConnectionControllerTest.cs')" Include="GeneratedTests\StorylinePlotElementConnectionControllerTest.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>StorylinePlotElementConnectionControllerTest.tt</DependentUpon>
    </Compile>
    <Compile Condition="!Exists('Services\TestDataService.cs')" Include="Services\TestDataService.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>TestDataService.tt</DependentUpon>
    </Compile>
    <Compile Condition="!Exists('GeneratedTests\AliasControllerTest.cs')" Include="GeneratedTests\AliasControllerTest.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>AliasControllerTest.tt</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <Compile Update="GeneratedTests\AliasControllerTest.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>AliasControllerTest.tt</DependentUpon>
    </Compile>
    <Compile Update="GeneratedTests\AuthorControllerTest.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>AuthorControllerTest.tt</DependentUpon>
    </Compile>
    <Compile Update="GeneratedTests\CharacterControllerTest.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>CharacterControllerTest.tt</DependentUpon>
    </Compile>
    <Compile Update="GeneratedTests\DatabaseDataServiceTestBase.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>DatabaseDataServiceTestBase.tt</DependentUpon>
    </Compile>
    <Compile Update="GeneratedTests\StorylineCharacterConnectionControllerTest.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>StorylineCharacterConnectionControllerTest.tt</DependentUpon>
    </Compile>
    <Compile Update="GeneratedTests\StorylineControllerTest.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>StorylineControllerTest.tt</DependentUpon>
    </Compile>
    <Compile Update="GeneratedTests\StorylinePlotElementConnectionControllerTest.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>StorylinePlotElementConnectionControllerTest.tt</DependentUpon>
    </Compile>
    <Compile Update="Services\TestDataService.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>TestDataService.tt</DependentUpon>
    </Compile>
  </ItemGroup>

  <!-- Because we are no longer implicitly importing Sdk.Targets at the end of the project file, we explicitly import it here. 
       Note that it needs to be imported -before- Microsoft.TextTemplating.targets, because otherwise it would overwrite
       the BuildDependsOn variable that texttemplating.targets modifies.
       See also: https://www.thomaslevesque.com/2017/11/13/transform-t4-templates-as-part-of-the-build-and-pass-variables-from-the-project/ -->
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
  <Import Project="$(VSToolsPath)\TextTemplating\Microsoft.TextTemplating.targets" />
</Project>
