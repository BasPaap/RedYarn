<#@ include file="DataServiceGenerator.t4" #>
<#
	List<string> entitiesWithNodes = new List<string>
	{
		"Character",
		"Storyline"
	};
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Bas.RedYarn.WebApp.Database;
using Bas.RedYarn.WebApp.ViewModels;

namespace Bas.RedYarn.WebApp.Services
{
    public sealed class DatabaseDataService : IDataService
    {
		private RedYarnDbContext dbContext;
		
        public DatabaseDataService(RedYarnDbContext redYarnDbContext)
        {
            this.dbContext = redYarnDbContext;
        }

<#
foreach (var viewModelName in viewModelNames)
{
	var modelName = GetModelName(viewModelName);#>
		public async Task<<#=viewModelName#>> Get<#=viewModelName#>Async(Guid id)
        {
            var model = await this.dbContext.<#=modelName#>s.FindAsync(id);
<# if (entitiesWithNodes.Contains(modelName))
{#>
			var node = await this.dbContext.<#=modelName#>Nodes.FindAsync(id);
			var viewModel = new <#=viewModelName#>(model, node.XPosition, node.YPosition);
<#}
else
{#>
			var viewModel = new <#=viewModelName#>(model);
<#}#>

			return viewModel;
        }

        public async Task<<#=viewModelName#>> Create<#=viewModelName#>Async(<#=viewModelName#> <#=Decapitalize(viewModelName)#>)
        {
			throw new NotImplementedException();
        }

        public async Task<(<#=viewModelName#> result, bool isFound)> Update<#=viewModelName#>Async(Guid id, <#=viewModelName#> <#=Decapitalize(viewModelName)#>)
        {
            throw new NotImplementedException();
        }

        public async Task<bool> Delete<#=viewModelName#>Async(Guid id)
        {
            var model = await this.dbContext.<#=modelName#>s.FindAsync(id);
<# if (entitiesWithNodes.Contains(modelName))
{#>
			var node = await this.dbContext.<#=modelName#>Nodes.FindAsync(id);
			if (model == null || node == null)
<#}
else
{#>
			var viewModel = new <#=viewModelName#>(model);
			if (model == null)
<#}#>			{
				return false;
			}

			this.dbContext.<#=modelName#>s.Remove(model);
<# if (entitiesWithNodes.Contains(modelName))
{#>
			this.dbContext.<#=modelName#>Nodes.Remove(node);
<#}#>
			await this.dbContext.SaveChangesAsync();
			return true;			
        }

<#
}#>
	}
}