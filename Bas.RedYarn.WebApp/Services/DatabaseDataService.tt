<#@ include file="$(SolutionDir)common.t4" #>
using System;
using System.Linq;
using System.Threading.Tasks;
using Bas.RedYarn.WebApp.Database;
using Bas.RedYarn.WebApp.ViewModels;
using Microsoft.EntityFrameworkCore;

namespace Bas.RedYarn.WebApp.Services
{
    public sealed class DatabaseDataService : IDataService
    {
		private RedYarnDbContext dbContext;
		
        public DatabaseDataService(RedYarnDbContext redYarnDbContext)
        {
            this.dbContext = redYarnDbContext;
        }

<#
foreach (var viewModelName in viewModelNames)
{
	var modelName = GetModelName(viewModelName);#>
		public async Task<<#=viewModelName#>> Get<#=viewModelName#>Async(Guid id)
        {
            var model = await this.dbContext.<#=modelName#>s.FindAsync(id);
			if (model == null)
			{
				return null;
			}

<# if (EntityHasNode(modelName))
{#>
			var node = this.dbContext.<#=modelName#>Nodes.FindByOwner(model);
			if (node == null)
			{
				return null;
			}

			var viewModel = new <#=viewModelName#>(model, node.XPosition, node.YPosition);
<#}
else
{#>
			var viewModel = new <#=viewModelName#>(model);
<#}#>

			return viewModel;
        }

        public async Task<<#=viewModelName#>> Create<#=viewModelName#>Async(<#=viewModelName#> <#=Decapitalize(viewModelName)#>)
        {
			if (<#=Decapitalize(viewModelName)#> == null)
			{
				throw new ArgumentNullException(nameof(<#=Decapitalize(viewModelName)#>));
			}

			var model = <#=Decapitalize(viewModelName)#>.ToModel();
			this.dbContext.<#=modelName#>s.Add(model);
<# if (EntityHasNode(modelName))
{#>
			var node = <#=Decapitalize(viewModelName)#>.ToNode();
			node.<#=modelName#> = model;
			this.dbContext.<#=modelName#>Nodes.Add(node);
<#}#>
			await this.dbContext.SaveChangesAsync();

			var newViewModel = new <#=viewModelName#>(<#=Decapitalize(viewModelName)#>);
			newViewModel.Id = (Guid)this.dbContext.Entry(model).Property("Id").CurrentValue;
			return newViewModel;
        }

        public async Task<(<#=viewModelName#> result, bool isFound)> Update<#=viewModelName#>Async(Guid id, <#=viewModelName#> <#=Decapitalize(viewModelName)#>)
        {
            if (<#=Decapitalize(viewModelName)#> == null)
			{
				throw new ArgumentNullException(nameof(<#=Decapitalize(viewModelName)#>));
			}

			var model = await this.dbContext.<#=modelName#>s.FindAsync(id);
			if (model == null)
			{
				return (null, false);
			}
<# if (EntityHasNode(modelName))
{#>
			var node = this.dbContext.<#=modelName#>Nodes.FindByOwner(model);
			if (node == null)
			{
				return (null, false);
			}
<#}#>

			<#=Decapitalize(viewModelName)#>.UpdateModel(model);			
<# if (EntityHasNode(modelName))
{#>
			<#=Decapitalize(viewModelName)#>.UpdateNode(node);
<#}#>
			await this.dbContext.SaveChangesAsync();

			var resultingViewModel = new <#=viewModelName#>(<#=Decapitalize(viewModelName)#>);
			resultingViewModel.Id = id;

			return (resultingViewModel, true);
        }

        public async Task<bool> Delete<#=viewModelName#>Async(Guid id)
        {
            var model = await this.dbContext.<#=modelName#>s.FindAsync(id);
			if (model == null)
			{
				return false;
			}
<# if (EntityHasNode(modelName))
{#>

			var node = this.dbContext.<#=modelName#>Nodes.FindByOwner(model);
			if (node == null)
			{
				return false;
			}
<#}#>
			
			this.dbContext.<#=modelName#>s.Remove(model);
<# if (EntityHasNode(modelName))
{#>
			this.dbContext.<#=modelName#>Nodes.Remove(node);
<#}#>
			await this.dbContext.SaveChangesAsync();
			return true;			
        }

<#
}#>
	}
}