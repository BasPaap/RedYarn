<#@ include file="$(SolutionDir)common.t4" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Linq;
using System.Threading.Tasks;
using Bas.RedYarn.WebApp.Database;
using Bas.RedYarn.WebApp.ViewModels;
using Microsoft.EntityFrameworkCore;

namespace Bas.RedYarn.WebApp.Services
{
    public sealed class DatabaseDataService : IDataService
    {
		private RedYarnDbContext dbContext;
		private Func<object, Guid> getIdForModelFunc;

        public DatabaseDataService(RedYarnDbContext redYarnDbContext)
        {
            this.dbContext = redYarnDbContext;
			this.getIdForModelFunc = m => (Guid)this.dbContext.Entry(m).Property(ShadowPropertyNames.Id).CurrentValue;
        }

<#
foreach (var viewModelName in viewModelNames.Except(extraViewModelNames))
{
	var modelName = GetModelName(viewModelName);
#>
		public async Task<<#=viewModelName#>> Get<#=viewModelName#>Async(Guid id)
        {
			var model = await (from m in this.dbContext.<#=Pluralize(modelName)#><# if (modelIncludes.Keys.Contains(modelName))
	{	
		WriteLine(modelIncludes[modelName]);
#>
							   where EF.Property<Guid>(m, ShadowPropertyNames.Id) == id
							   select m).SingleOrDefaultAsync();
<#
	}
	else
	{
#>

							   where EF.Property<Guid>(m, ShadowPropertyNames.Id) == id
							   select m).SingleOrDefaultAsync();
<#
	}
#>			
			if (model == null)
			{
				return null;
			}

<# 
	if (modelName == nameof(Diagram))
	{
		foreach (var entityWithNode in entitiesWithNodes)
		{
#>
			var <#=Decapitalize(entityWithNode) + "Ids"#> = model.<#=Pluralize(entityWithNode)#>.Select(e => this.getIdForModelFunc(e));
			var <#=Decapitalize(Pluralize(entityWithNode + "Node"))#> = this.dbContext.<#=entityWithNode + "Nodes"#>.Include(n => n.<#=entityWithNode#>).Where(n => <#=Decapitalize(entityWithNode) + "Ids"#>.Contains(this.getIdForModelFunc(n.<#=entityWithNode#>)));
			var <#=Decapitalize(GetViewModelName(entityWithNode))#>Dictionary = model.<#=Pluralize(entityWithNode)#>.ToDictionary(e => e, e => new <#=GetViewModelName(entityWithNode)#>(e, <#=Decapitalize(Pluralize(entityWithNode + "Node"))#>.Single(n => this.getIdForModelFunc(n.<#=entityWithNode#>) == this.getIdForModelFunc(e)), this.getIdForModelFunc));
			
<#
		}
	}
	
	if (EntityHasNode(modelName))
	{
#>
			var node = this.dbContext.<#=modelName#>Nodes.FindByParent(model);
			if (node == null)
			{
				return null;
			}

			var viewModel = new <#=viewModelName#>(model, node.XPosition, node.YPosition, this.getIdForModelFunc);
<#
	}
	else
	{
#>
			var viewModel = new <#=viewModelName#>(model, this.getIdForModelFunc<#
		if (modelName == nameof(Diagram)) 
		{
			foreach(var entityWithNode in entitiesWithNodes)
			{
				Write($", {Decapitalize(GetViewModelName(entityWithNode))}Dictionary");
			}
		}
#>);
<#
	}
#>
			viewModel.Id = id;

			return viewModel;
        }

        public async Task<<#=viewModelName#>> Create<#=viewModelName#>Async(<# if (entitiesToAddToDiagram.Contains(modelName)) { #>Guid diagramId, <#}#><#=viewModelName#> <#=Decapitalize(viewModelName)#>)
        {
			if (<#=Decapitalize(viewModelName)#> == null)
			{
				throw new ArgumentNullException(nameof(<#=Decapitalize(viewModelName)#>));
			}

			var model = <#=Decapitalize(viewModelName)#>.ToModel(<#= modelName == nameof(Relationship) ? "id => this.dbContext.Characters.Find(id)" : string.Empty #>);
<# 
	if (entitiesToAddToDiagram.Contains(modelName))
	{
#>
			var diagram = this.dbContext.Diagrams.Find(diagramId);
            diagram.<#=Pluralize(modelName)#>.Add(model);

<#
	}
	else
	{
#>
			this.dbContext.<#=Pluralize(modelName)#>.Add(model);
<#
	}

	if (EntityHasNode(modelName))
	{
#>
			var node = <#=Decapitalize(viewModelName)#>.ToNode();
			node.<#=modelName#> = model;

			this.dbContext.<#=modelName#>Nodes.Add(node);
<#
	}
#>
			await this.dbContext.SaveChangesAsync();

			var newViewModel = new <#=viewModelName#>(<#=Decapitalize(viewModelName)#>);
			newViewModel.Id = (Guid)this.dbContext.Entry(model).Property(ShadowPropertyNames.Id).CurrentValue;

			return newViewModel;
        }

        public async Task<(<#=viewModelName#> result, bool isFound)> Update<#=viewModelName#>Async(Guid id, <#=viewModelName#> <#=Decapitalize(viewModelName)#>)
        {
            if (<#=Decapitalize(viewModelName)#> == null)
			{
				throw new ArgumentNullException(nameof(<#=Decapitalize(viewModelName)#>));
			}

			var model = await this.dbContext.<#=Pluralize(modelName)#>.FindAsync(id);
			if (model == null)
			{
				return (null, false);
			}
<#
	if (EntityHasNode(modelName))
	{
#>

			var node = this.dbContext.<#=modelName#>Nodes.FindByParent(model);
			if (node == null)
			{
				return (null, false);
			}
<#
	}

	if (modelName == nameof(Relationship))
	{
#>

			<#=Decapitalize(viewModelName)#>.UpdateModel(model, characterId => this.dbContext.Characters.Find(characterId));			
<#
	}
	else
	{
#>
			<#=Decapitalize(viewModelName)#>.UpdateModel(model);			
<#
	}
	
	if (EntityHasNode(modelName))
	{
#>
			<#=Decapitalize(viewModelName)#>.UpdateNode(node);
<#
	}
#>
			await this.dbContext.SaveChangesAsync();

			var resultingViewModel = new <#=viewModelName#>(<#=Decapitalize(viewModelName)#>);
			resultingViewModel.Id = id;

			return (resultingViewModel, true);
        }

        public async Task<bool> Delete<#=viewModelName#>Async(Guid id)
        {
            var model = await this.dbContext.<#=Pluralize(modelName)#>.FindAsync(id);
			if (model == null)
			{
				return false;
			}
<#
	if (EntityHasNode(modelName))
	{
#>

			var node = this.dbContext.<#=modelName#>Nodes.FindByParent(model);
			if (node == null)
			{
				return false;
			}
<#
	}
#>
			
			this.dbContext.<#=Pluralize(modelName)#>.Remove(model);
<#
	if (EntityHasNode(modelName))
	{
#>
			this.dbContext.<#=modelName#>Nodes.Remove(node);
<#
	}
#>
			await this.dbContext.SaveChangesAsync();

			return true;			
        }

<#
} // End of foreach for first list of viewmodels


foreach (var viewModelName in extraViewModelNames)
{
	var modelName = GetModelName(viewModelName);
	var modelTypeName = viewModelName == "CharacterPlotElementConnectionViewModel" ? "CharacterPlotElementJoinTable" : modelName;
#>

		public async Task<<#=viewModelName#>> Get<#=viewModelName#>Async(Guid fromNodeId, Guid toNodeId)
		{
			throw new NotImplementedException();
		}

		public async Task<<#=viewModelName#>> Create<#=viewModelName#>Async(<#=viewModelName#> <#=Decapitalize(viewModelName)#>)
		{
			if (<#=Decapitalize(viewModelName)#> == null)
			{
				throw new ArgumentNullException(nameof(<#=Decapitalize(viewModelName)#>));
			}
			
			var model = <#=Decapitalize(viewModelName)#>.ToModel(fromId => this.dbContext.<#=Pluralize(extraViewModelConnectionTypeNames[viewModelName][0])#>.Find(fromId),
                                                                 toId => this.dbContext.<#=Pluralize(extraViewModelConnectionTypeNames[viewModelName][1])#>.Find(toId));
<#
	if (viewModelName == "CharacterPlotElementConnectionViewModel")
	{
#>
			this.dbContext.CharacterPlotElements.Add(model);
<#
	}
	else
	{
#>
			this.dbContext.<#=Pluralize(modelTypeName.Replace("Connection", string.Empty))#>.Add(model);
<#
	}
#>
			await this.dbContext.SaveChangesAsync();

            return <#=Decapitalize(viewModelName)#>;
		}
		
		public async Task<(<#=viewModelName#> result, bool isFound)> Update<#=viewModelName#>Async(Guid fromNodeId, Guid toNodeId, <#=viewModelName#> <#=Decapitalize(viewModelName)#>)
		{
			if (<#=Decapitalize(viewModelName)#> == null)
			{
				throw new ArgumentNullException(nameof(<#=Decapitalize(viewModelName)#>));
			}

			throw new NotImplementedException();
		}

        public async Task<bool> Delete<#=viewModelName#>Async(Guid fromNodeId, Guid toNodeId)
		{
			var model = await this.dbContext.<#=Pluralize(modelTypeName.Replace("Connection", string.Empty).Replace("JoinTable", string.Empty))#>.SingleOrDefaultAsync(c => c.LeftEntityId == fromNodeId && c.RightEntityId == toNodeId);

			if (model == null)
			{
				return false;
			}

			this.dbContext.<#=Pluralize(modelTypeName.Replace("Connection", string.Empty).Replace("JoinTable", string.Empty))#>.Remove(model);
			await this.dbContext.SaveChangesAsync();

			return true;
		}
<#
} // End of foreach for second list of viewmodels


#>
	}
}
<#+

Dictionary<string, string> modelIncludes = new Dictionary<string, string>
{
	[nameof(Diagram)] = @"
				.Include(diagram => diagram.Authors)
				.Include(diagram => diagram.Characters)
					.ThenInclude(character => character.Aliases)
				.Include(diagram => diagram.PlotElements)
				.Include(diagram => diagram.Storylines)
				.Include(diagram => diagram.Tags)"
};
#>