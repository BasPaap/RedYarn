<#@ include file="$(SolutionDir)common.t4" #>
<#@ assembly name="$(SolutionDir)\Bas.RedYarn.WebApp\bin\Debug\netcoreapp2.1\Bas.RedYarn.WebApp.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Bas.RedYarn.WebApp.ViewModels" #>
using System;
using System.Linq;
using System.Threading.Tasks;
using Bas.RedYarn.WebApp.Database;
using Bas.RedYarn.WebApp.ViewModels;
using Microsoft.EntityFrameworkCore;

namespace Bas.RedYarn.WebApp.Services
{
    public sealed class DatabaseDataService : IDataService
    {
		private RedYarnDbContext dbContext;
		private Func<object, Guid> getIdForModelFunc;
        public DatabaseDataService(RedYarnDbContext redYarnDbContext)
        {
            this.dbContext = redYarnDbContext;
			this.getIdForModelFunc = m => (Guid)this.dbContext.Entry(m).Property(ShadowPropertyNames.Id).CurrentValue;
        }

<#
foreach (var viewModelName in viewModelNames)
{
	var modelName = GetModelName(viewModelName);#>
		public async Task<<#=viewModelName#>> Get<#=viewModelName#>Async(<#=GetIdParameters(GetModelName(viewModelName))#>)
        {
			var model = await (from m in this.dbContext.<#=Pluralize(modelName)#><# if (modelIncludes.Keys.Contains(modelName))
{
	WriteLine(modelIncludes[modelName]);
#>				where <#=GetLinqWhereClauseForIds(modelName)#>
				select m).SingleOrDefaultAsync();
<#
}
else
{#>

				where <#=GetLinqWhereClauseForIds(modelName)#>
				select m).SingleOrDefaultAsync();
<#}#>			
			if (model == null)
			{
				return null;
			}

<# if (modelName == "Diagram")
{
	foreach (var entityWithNode in entitiesWithNodes)
	{#>
			var <#=Decapitalize(entityWithNode) + "Ids"#> = model.<#=Pluralize(entityWithNode)#>.Select(e => this.getIdForModelFunc(e));
			var <#=Decapitalize(Pluralize(entityWithNode + "Node"))#> = this.dbContext.<#=entityWithNode + "Nodes"#>.Include(n => n.<#=entityWithNode#>).Where(n => <#=Decapitalize(entityWithNode) + "Ids"#>.Contains(this.getIdForModelFunc(n.<#=entityWithNode#>)));
			var <#=Decapitalize(GetViewModelName(entityWithNode))#>Dictionary = model.<#=Pluralize(entityWithNode)#>.ToDictionary(e => e, e => new <#=GetViewModelName(entityWithNode)#>(e, <#=Decapitalize(Pluralize(entityWithNode + "Node"))#>.Single(n => this.getIdForModelFunc(n.<#=entityWithNode#>) == this.getIdForModelFunc(e)), this.getIdForModelFunc));
			
<#	}
}#>
<# if (EntityHasNode(modelName))
{#>
			var node = this.dbContext.<#=modelName#>Nodes.FindByParent(model);
			if (node == null)
			{
				return null;
			}

			var viewModel = new <#=viewModelName#>(model, node.XPosition, node.YPosition, this.getIdForModelFunc);
<#}
else
{#>
			var viewModel = new <#=viewModelName#>(model, <#=GetIdForModelFunc(modelName)#><#
	if (modelName == "Diagram") 
	{
		foreach(var entityWithNode in entitiesWithNodes)
		{
			Write($", {Decapitalize(GetViewModelName(entityWithNode))}Dictionary");
		}
	}#>);
<#}
if (modelsWithCompositeKeys.Keys.Contains(modelName))
{
	foreach(var keyName in modelsWithCompositeKeys[modelName])
	{
		WriteLine($"\t\t\tviewModel.{keyName} = {Decapitalize(keyName)};");
	}
}
else
{#>			viewModel.Id = id;
<#}#>

			return viewModel;
        }

        public async Task<<#=viewModelName#>> Create<#=viewModelName#>Async(<# if (entitiesToAddToDiagram.Contains(modelName)) { #>Guid diagramId, <#}#><#=viewModelName#> <#=Decapitalize(viewModelName)#>)
        {
			if (<#=Decapitalize(viewModelName)#> == null)
			{
				throw new ArgumentNullException(nameof(<#=Decapitalize(viewModelName)#>));
			}

			var model = <#=Decapitalize(viewModelName)#>.ToModel(<#=GetToModelArguments(viewModelName)#>);
<# if (entitiesToAddToDiagram.Contains(modelName))
{#>
			var diagram = this.dbContext.Diagrams.Find(diagramId);
            diagram.<#=Pluralize(modelName)#>.Add(model);
<#}
else
{#>
			this.dbContext.<#=Pluralize(modelName)#>.Add(model);
<#}#>
<# if (EntityHasNode(modelName))
{#>
			var node = <#=Decapitalize(viewModelName)#>.ToNode();
			node.<#=modelName#> = model;
			this.dbContext.<#=modelName#>Nodes.Add(node);
<#}#>
			await this.dbContext.SaveChangesAsync();

			var newViewModel = new <#=viewModelName#>(<#=Decapitalize(viewModelName)#>);
<#if (modelsWithCompositeKeys.Keys.Contains(modelName))
{
	foreach(var keyName in modelsWithCompositeKeys[modelName])
	{
		WriteLine($"\t\t\tnewViewModel.{keyName} = (Guid)this.dbContext.Entry(model).Property(\"{keyName}\").CurrentValue;");
	}
}
else
{#>
			newViewModel.Id = (Guid)this.dbContext.Entry(model).Property(ShadowPropertyNames.Id).CurrentValue;
<#}#>

			return newViewModel;
        }

        public async Task<(<#=viewModelName#> result, bool isFound)> Update<#=viewModelName#>Async(<#=GetIdParameters(modelName)#>, <#=viewModelName#> <#=Decapitalize(viewModelName)#>)
        {
            if (<#=Decapitalize(viewModelName)#> == null)
			{
				throw new ArgumentNullException(nameof(<#=Decapitalize(viewModelName)#>));
			}

			var model = await this.dbContext.<#=Pluralize(modelName)#>.FindAsync(<#=GetIdArguments(modelName)#>);
			if (model == null)
			{
				return (null, false);
			}
<# if (EntityHasNode(modelName))
{#>
			var node = this.dbContext.<#=modelName#>Nodes.FindByParent(model);
			if (node == null)
			{
				return (null, false);
			}
<#}

if (modelName == nameof(Relationship))
{#>
			<#=Decapitalize(viewModelName)#>.UpdateModel(model, (f,s) => (this.dbContext.Characters.Find(f), this.dbContext.Characters.Find(s)) );			
<#}
else
{#>
			<#=Decapitalize(viewModelName)#>.UpdateModel(model);			
<#}

if (EntityHasNode(modelName))
{#>
			<#=Decapitalize(viewModelName)#>.UpdateNode(node);
<#}#>
			await this.dbContext.SaveChangesAsync();

			var resultingViewModel = new <#=viewModelName#>(<#=Decapitalize(viewModelName)#>);
<#if (modelsWithCompositeKeys.Keys.Contains(modelName))
{
	foreach(var keyName in modelsWithCompositeKeys[modelName])
	{
		WriteLine($"\t\t\tresultingViewModel.{keyName} = {Decapitalize(keyName)};");
	}
}
else
{#>
			resultingViewModel.Id = id;
<#}#>

			return (resultingViewModel, true);
        }

        public async Task<bool> Delete<#=viewModelName#>Async(<#=GetIdParameters(modelName)#>)
        {
            var model = await this.dbContext.<#=Pluralize(modelName)#>.FindAsync(<#=GetIdArguments(modelName)#>);
			if (model == null)
			{
				return false;
			}
<# if (EntityHasNode(modelName))
{#>

			var node = this.dbContext.<#=modelName#>Nodes.FindByParent(model);
			if (node == null)
			{
				return false;
			}
<#}#>
			
			this.dbContext.<#=Pluralize(modelName)#>.Remove(model);
<# if (EntityHasNode(modelName))
{#>
			this.dbContext.<#=modelName#>Nodes.Remove(node);
<#}#>
			await this.dbContext.SaveChangesAsync();
			return true;			
        }

<#
}#>
	}
}
<#+

Dictionary<string, string> modelIncludes = new Dictionary<string, string>
{
	[nameof(Diagram)] = @"
				.Include(diagram => diagram.Authors)
				.Include(diagram => diagram.Characters)
					.ThenInclude(character => character.Aliases)
				.Include(diagram => diagram.PlotElements)
				.Include(diagram => diagram.Storylines)
				.Include(diagram => diagram.Tags)"
};


Dictionary<string, string> toModelArguments = new Dictionary<string, string>
{
	[nameof(RelationshipViewModel)] = "id => this.dbContext.Characters.SingleOrDefault(c => EF.Property<Guid>(c, ShadowPropertyNames.Id) == id)"
};

private string GetToModelArguments(string viewModelName)
{
	return (toModelArguments.Keys.Contains(viewModelName)) ? toModelArguments[viewModelName] : string.Empty;	
}
#>