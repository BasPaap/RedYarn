//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Threading.Tasks;
using Bas.RedYarn.WebApp.Database;
using Bas.RedYarn.WebApp.ViewModels;
using Microsoft.EntityFrameworkCore;

namespace Bas.RedYarn.WebApp.Services
{
    public sealed class DatabaseDataService : IDataService
    {
		private RedYarnDbContext dbContext;
		
        public DatabaseDataService(RedYarnDbContext redYarnDbContext)
        {
            this.dbContext = redYarnDbContext;
        }

		public async Task<DiagramViewModel> GetDiagramViewModelAsync(Guid id)
        {
            var model = await this.dbContext.Diagrams.FindAsync(id);
			if (model == null)
			{
				return null;
			}

			var viewModel = new DiagramViewModel(model);

			return viewModel;
        }

        public async Task<DiagramViewModel> CreateDiagramViewModelAsync(DiagramViewModel diagramViewModel)
        {
			if (diagramViewModel == null)
			{
				throw new ArgumentNullException();
			}

			var model = diagramViewModel.ToModel();
			this.dbContext.Diagrams.Add(model);
			await this.dbContext.SaveChangesAsync();

			var newViewModel = new DiagramViewModel(diagramViewModel);
			newViewModel.Id = (Guid)this.dbContext.Entry(model).Property("Id").CurrentValue;
			return newViewModel;
        }

        public async Task<(DiagramViewModel result, bool isFound)> UpdateDiagramViewModelAsync(Guid id, DiagramViewModel diagramViewModel)
        {
            throw new NotImplementedException();
        }

        public async Task<bool> DeleteDiagramViewModelAsync(Guid id)
        {
            var model = await this.dbContext.Diagrams.FindAsync(id);
			if (model == null)
			{
				return false;
			}
			
			this.dbContext.Diagrams.Remove(model);
			await this.dbContext.SaveChangesAsync();
			return true;			
        }

		public async Task<CharacterViewModel> GetCharacterViewModelAsync(Guid id)
        {
            var model = await this.dbContext.Characters.FindAsync(id);
			if (model == null)
			{
				return null;
			}

			var node = this.dbContext.CharacterNodes.FindByOwner(model);
			if (node == null)
			{
				return null;
			}

			var viewModel = new CharacterViewModel(model, node.XPosition, node.YPosition);

			return viewModel;
        }

        public async Task<CharacterViewModel> CreateCharacterViewModelAsync(CharacterViewModel characterViewModel)
        {
			if (characterViewModel == null)
			{
				throw new ArgumentNullException();
			}

			var model = characterViewModel.ToModel();
			this.dbContext.Characters.Add(model);
			await this.dbContext.SaveChangesAsync();

			var newViewModel = new CharacterViewModel(characterViewModel);
			newViewModel.Id = (Guid)this.dbContext.Entry(model).Property("Id").CurrentValue;
			return newViewModel;
        }

        public async Task<(CharacterViewModel result, bool isFound)> UpdateCharacterViewModelAsync(Guid id, CharacterViewModel characterViewModel)
        {
            throw new NotImplementedException();
        }

        public async Task<bool> DeleteCharacterViewModelAsync(Guid id)
        {
            var model = await this.dbContext.Characters.FindAsync(id);
			if (model == null)
			{
				return false;
			}

			var node = this.dbContext.CharacterNodes.FindByOwner(model);
			if (node == null)
			{
				return false;
			}
			
			this.dbContext.Characters.Remove(model);
			this.dbContext.CharacterNodes.Remove(node);
			await this.dbContext.SaveChangesAsync();
			return true;			
        }

		public async Task<StorylineViewModel> GetStorylineViewModelAsync(Guid id)
        {
            var model = await this.dbContext.Storylines.FindAsync(id);
			if (model == null)
			{
				return null;
			}

			var node = this.dbContext.StorylineNodes.FindByOwner(model);
			if (node == null)
			{
				return null;
			}

			var viewModel = new StorylineViewModel(model, node.XPosition, node.YPosition);

			return viewModel;
        }

        public async Task<StorylineViewModel> CreateStorylineViewModelAsync(StorylineViewModel storylineViewModel)
        {
			if (storylineViewModel == null)
			{
				throw new ArgumentNullException();
			}

			var model = storylineViewModel.ToModel();
			this.dbContext.Storylines.Add(model);
			await this.dbContext.SaveChangesAsync();

			var newViewModel = new StorylineViewModel(storylineViewModel);
			newViewModel.Id = (Guid)this.dbContext.Entry(model).Property("Id").CurrentValue;
			return newViewModel;
        }

        public async Task<(StorylineViewModel result, bool isFound)> UpdateStorylineViewModelAsync(Guid id, StorylineViewModel storylineViewModel)
        {
            throw new NotImplementedException();
        }

        public async Task<bool> DeleteStorylineViewModelAsync(Guid id)
        {
            var model = await this.dbContext.Storylines.FindAsync(id);
			if (model == null)
			{
				return false;
			}

			var node = this.dbContext.StorylineNodes.FindByOwner(model);
			if (node == null)
			{
				return false;
			}
			
			this.dbContext.Storylines.Remove(model);
			this.dbContext.StorylineNodes.Remove(node);
			await this.dbContext.SaveChangesAsync();
			return true;			
        }

		public async Task<AuthorViewModel> GetAuthorViewModelAsync(Guid id)
        {
            var model = await this.dbContext.Authors.FindAsync(id);
			if (model == null)
			{
				return null;
			}

			var viewModel = new AuthorViewModel(model);

			return viewModel;
        }

        public async Task<AuthorViewModel> CreateAuthorViewModelAsync(AuthorViewModel authorViewModel)
        {
			if (authorViewModel == null)
			{
				throw new ArgumentNullException();
			}

			var model = authorViewModel.ToModel();
			this.dbContext.Authors.Add(model);
			await this.dbContext.SaveChangesAsync();

			var newViewModel = new AuthorViewModel(authorViewModel);
			newViewModel.Id = (Guid)this.dbContext.Entry(model).Property("Id").CurrentValue;
			return newViewModel;
        }

        public async Task<(AuthorViewModel result, bool isFound)> UpdateAuthorViewModelAsync(Guid id, AuthorViewModel authorViewModel)
        {
            throw new NotImplementedException();
        }

        public async Task<bool> DeleteAuthorViewModelAsync(Guid id)
        {
            var model = await this.dbContext.Authors.FindAsync(id);
			if (model == null)
			{
				return false;
			}
			
			this.dbContext.Authors.Remove(model);
			await this.dbContext.SaveChangesAsync();
			return true;			
        }

	}
}