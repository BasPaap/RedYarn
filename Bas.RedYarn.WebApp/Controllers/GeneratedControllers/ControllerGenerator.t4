<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="$(SolutionDir)\Bas.RedYarn\bin\Debug\netcoreapp2.1\Bas.RedYarn.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Bas.RedYarn" #>
<#@ output extension=".cs" #><#+

private string Decapitalize(string capitalizedString)
{
	return Char.ToLowerInvariant(capitalizedString[0]) + capitalizedString.Substring(1);
}

private void WriteController(string className)
{
	string instanceName = Decapitalize(className);

#>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

using Bas.RedYarn.WebApp.Services;
using Bas.RedYarn.WebApp.ViewModels;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Threading.Tasks;

namespace Bas.RedYarn.WebApp.Controllers
{
    public partial class <#=className#>Controller : ControllerBase
    {
        private readonly IDataService dataService;

        public <#=className#>Controller(IDataService dataService)
        {
            this.dataService = dataService;
        }

		[HttpGet]
        [ProducesResponseType(200)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<<#=className#>ViewModel>> Get<#=className#>ViewModelAsync(Guid id)
        {            
            var <#=instanceName#>ViewModel = await this.dataService.Get<#=className#>ViewModelAsync(id);            
            if (<#=instanceName#>ViewModel == null)
            {
                return NotFound();
            }

            return <#=instanceName#>ViewModel;            
        }

        [HttpPost]
        [ProducesResponseType(201)]
        [ProducesResponseType(400)]
        public async Task<ActionResult<<#=className#>ViewModel>> Create<#=className#>Async(<#=className#>ViewModel <#=instanceName#>ViewModel)
        {
            var created<#=className#>ViewModel = await this.dataService.Create<#=className#>Async(<#=instanceName#>ViewModel);
            return CreatedAtAction(RouteData.Values["Action"].ToString(), RouteData.Values["Controller"].ToString(), new { id = created<#=className#>ViewModel.Id }, created<#=className#>ViewModel);            
        }

        [HttpPut]        
        public async Task<ActionResult> Update<#=className#>Async(Guid id, <#=className#>ViewModel <#=instanceName#>ViewModel)
        {
            await this.dataService.Update<#=className#>ViewModelAsync(id, <#=instanceName#>ViewModel);
            return NoContent();
        }

        [HttpDelete]
        [ProducesResponseType(204)]
        [ProducesResponseType(404)]
        public async Task<ActionResult> Delete<#=className#>Async(Guid id)
        {
            if (await this.dataService.Get<#=className#>ViewModelAsync(id) == null)
            {
                return NotFound();
            }

            await this.dataService.Delete<#=className#>ViewModelAsync(id);
            return NoContent();
        }
	}
}
<#+
}
#>