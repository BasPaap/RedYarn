<#@ include file="$(SolutionDir)common.t4" #>
<#+
private void WriteController(string className)
{
	string instanceName = Decapitalize(className);#>
using Bas.RedYarn.WebApp.Services;
using Bas.RedYarn.WebApp.ViewModels;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Threading.Tasks;

namespace Bas.RedYarn.WebApp.Controllers
{
	[Route("api/[controller]")]
    [ApiController]
    public partial class <#=className#>Controller : ControllerBase
    {
        private readonly IDataService dataService;

        public <#=className#>Controller(IDataService dataService)
        {
            this.dataService = dataService;
        }

		[HttpGet("{id}")]
        [ProducesResponseType(200)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<<#=className#>ViewModel>> Get<#=className#>ViewModelAsync(<#=GetIdParameters(className)#>)
        {            
            var <#=instanceName#>ViewModel = await this.dataService.Get<#=className#>ViewModelAsync(<#=GetIdArguments(className)#>);            
            if (<#=instanceName#>ViewModel == null)
            {
                return NotFound();
            }

            return <#=instanceName#>ViewModel;            
        }

<#+		if (entitiesToAddToDiagram.Contains(className))
		{#>
		[HttpPost("{diagramId}")]
<#+		}
		else
		{#>
        [HttpPost]
<#+		}#>
        [ProducesResponseType(201)]
        [ProducesResponseType(400)]
        public async Task<ActionResult<<#=className#>ViewModel>> Create<#=className#>Async(<#+ if (entitiesToAddToDiagram.Contains(className)) { #>Guid diagramId, <#+}#><#=className#>ViewModel <#=instanceName#>ViewModel)
        {
			try
			{
				var created<#=className#>ViewModel = await this.dataService.Create<#=className#>ViewModelAsync(<#+ if (entitiesToAddToDiagram.Contains(className)) { #>diagramId, <#+}#><#=instanceName#>ViewModel);
				return CreatedAtAction(nameof(Get<#=className#>ViewModelAsync), new { <#+
				
				if (modelsWithCompositeKeys.Keys.Contains(className))
				{
					Write(string.Join(", ", modelsWithCompositeKeys[className].Select(key => $"{Decapitalize(key)} = created{className}ViewModel.{key}")));					
				}
				else
				{
					Write($"id = created{className}ViewModel.Id");
				}
				
#> }, created<#=className#>ViewModel);            
			}
			catch
			{
				return BadRequest();
			}
        }

        [HttpPut("{id}")]        
		[ProducesResponseType(201)]
        [ProducesResponseType(400)]
        [ProducesResponseType(404)]
        public async Task<ActionResult> Update<#=className#>Async(<#=GetIdParameters(className)#>, <#=className#>ViewModel <#=instanceName#>ViewModel)
        {
			try
			{
				var response = await this.dataService.Update<#=className#>ViewModelAsync(<#=GetIdArguments(className)#>, <#=instanceName#>ViewModel);
				if (response.isFound)
				{
					return NoContent();
				}
				else
				{
					return NotFound();
				}				
			}
			catch (ArgumentException)
			{
				return BadRequest();	
			}
        }

        [HttpDelete("{id}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(404)]
        public async Task<ActionResult> Delete<#=className#>Async(<#=GetIdParameters(className)#>)
        {
            var isFound = await this.dataService.Delete<#=className#>ViewModelAsync(<#=GetIdArguments(className)#>);
            if (isFound)
			{
				return NoContent();
			}
			else
			{
				return NotFound();
			}
        }
	}
}
<#+
}
#>