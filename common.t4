<#@ assembly name="$(SolutionDir)\Bas.RedYarn\bin\Debug\netcoreapp2.1\Bas.RedYarn.dll" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Bas.RedYarn" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------<#+
static List<string> modelNames = new List<string> 
{
	nameof(Diagram),
	nameof(Character),
	nameof(Storyline),
	nameof(PlotElement),
	nameof(Author),
	nameof(Tag),
	nameof(Alias),
	nameof(Relationship)
};

Dictionary<string, List<string>> modelsWithCompositeKeys = new Dictionary<string, List<string>>
{
	[nameof(Relationship)] = new System.Collections.Generic.List<string> { "FirstCharacterId", "SecondCharacterId" }
};

Dictionary<string, string> modelsWithNonStandardGetIdForModelFuncs = new Dictionary<string, string>()
{
	[nameof(Relationship)] = "(m) => ((Guid)this.dbContext.Entry(m).Property(\"FirstCharacterId\").CurrentValue, (Guid)this.dbContext.Entry(m).Property(\"SecondCharacterId\").CurrentValue)"
};

private int GetNumIdParameters(string modelName)
{
	return modelsWithCompositeKeys.Keys.Contains(modelName) ? modelsWithCompositeKeys[modelName].Count : 1;
}

private string GetIdForModelFunc(string modelName)
{
	if (modelsWithNonStandardGetIdForModelFuncs.Keys.Contains(modelName))
	{
		return modelsWithNonStandardGetIdForModelFuncs[modelName];
	}
	else
	{
		return  "this.getIdForModelFunc";
	}
}

List<string> viewModelNames = new List<string>(modelNames.Select(m => $"{m}ViewModel"));
List<string> entitiesWithNodes = new List<string>
{
	nameof(Character),
	nameof(Storyline),
	nameof(PlotElement)
};

List<string> entitiesToAddToDiagram = new List<string>
{
	nameof(Character),
	nameof(Storyline),
	nameof(PlotElement),
	nameof(Author),
	nameof(Tag),
	nameof(Alias)
};

private string GetIdArguments(string modelName)
{
	if (modelsWithCompositeKeys.Keys.Contains(modelName))
	{	
		return string.Join(", ", modelsWithCompositeKeys[modelName].Select(i => Decapitalize(i)));
	}
	else
	{
		return "id";
	}
}

private string GetIdParameters(string modelName)
{
	if (modelsWithCompositeKeys.Keys.Contains(modelName))
	{	
		return "Guid " + string.Join(", Guid ", modelsWithCompositeKeys[modelName].Select(i => Decapitalize(i)));
	}
	else
	{
		return "Guid id";
	}
}

private string GetLinqWhereClauseForIds(string modelName)
{
	if (modelsWithCompositeKeys.Keys.Contains(modelName))
	{	
		return string.Join(" && ", modelsWithCompositeKeys[modelName].Select(i => $"EF.Property<Guid>(m, \"{i}\") == {Decapitalize(i)}"));
	}
	else
	{
		return "EF.Property<Guid>(m, ShadowPropertyNames.Id) == id";
	}
}

private string Decapitalize(string capitalizedString)
{
	return Char.ToLowerInvariant(capitalizedString[0]) + capitalizedString.Substring(1);
}

private string GetModelName(string viewModelName)
{
	return viewModelName.Substring(0, viewModelName.IndexOf("ViewModel"));
}

private string GetViewModelName(string modelName)
{
	return $"{modelName}ViewModel";
}

private bool EntityHasNode(string entityName)
{
	return entitiesWithNodes.Contains(entityName);
}

private string Pluralize(string noun)
{
	if (noun.EndsWith("s") || noun.EndsWith("h"))
	{
		return $"{noun}es";
	}
	else if (noun.EndsWith("y"))
	{
		return $"{noun.Substring(0, noun.Length -1)}ies";
	}
	else 
	{
		return $"{noun}s";
	}
	
}
#>