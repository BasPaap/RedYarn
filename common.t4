<#@ assembly name="$(SolutionDir)\Bas.RedYarn\bin\Debug\netcoreapp2.1\Bas.RedYarn.dll" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Bas.RedYarn" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
<#+
static List<string> modelNames = new List<string> 
{
	nameof(Diagram),
	nameof(Character),
	nameof(Storyline),
	nameof(PlotElement),
	nameof(Author),
	nameof(Tag),
	nameof(Alias),
	nameof(Relationship)
};

static List<string> extraViewModelNames = new List<string>
{
	"StorylineCharacterConnectionViewModel", 
	"StorylinePlotElementConnectionViewModel",
	"CharacterPlotElementConnectionViewModel"
};

List<string> viewModelNames = new List<string>((modelNames.Select(m => $"{m}ViewModel")).Concat(extraViewModelNames));

List<string> entitiesWithNodes = new List<string>
{
	nameof(Character),
	nameof(Storyline),
	nameof(PlotElement)
};

List<string> entitiesToAddToDiagram = new List<string>
{
	nameof(Character),
	nameof(Storyline),
	nameof(PlotElement),
	nameof(Author),
	nameof(Tag),
	nameof(Alias)
};

private string Decapitalize(string capitalizedString)
{
	return Char.ToLowerInvariant(capitalizedString[0]) + capitalizedString.Substring(1);
}

private string GetModelName(string viewModelName)
{
	return viewModelName.Substring(0, viewModelName.IndexOf("ViewModel"));
}

private string GetViewModelName(string modelName)
{
	return $"{modelName}ViewModel";
}

private bool EntityHasNode(string entityName)
{
	return entitiesWithNodes.Contains(entityName);
}

private string Pluralize(string noun)
{
	if (noun.EndsWith("s") || noun.EndsWith("h"))
	{
		return $"{noun}es";
	}
	else if (noun.EndsWith("y"))
	{
		return $"{noun.Substring(0, noun.Length -1)}ies";
	}
	else 
	{
		return $"{noun}s";
	}
	
}
#>