<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="$(SolutionDir)\Bas.RedYarn\bin\Debug\netcoreapp2.1\Bas.RedYarn.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Bas.RedYarn" #>
<#@ output extension=".cs" #><#+
private void WriteBeginning(string unitUnderTestName)
{
#>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

using Bas.RedYarn.Helpers;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Bas.RedYarn
{
    public partial class <#= unitUnderTestName #>Test
    {
<#+
}

private void WriteEnd()
{
#>
	}
}
<#+
}

private string Decapitalize(string capitalizedString)
{
	return Char.ToLowerInvariant(capitalizedString[0]) + capitalizedString.Substring(1);
}

private void WriteToStringTests(string testObjectName)
{
#>
		#region ToString
        [TestMethod]
        public void ToString_NameIsNotEmpty_ReturnsName()
        {
            ToStringHelper.ToString_NameIsNotEmpty_ReturnsName(this.<#= Decapitalize(testObjectName) #>);
        }

        [TestMethod]
        public void ToString_NameIsEmpty_ReturnsClassName()
        {
            ToStringHelper.ToString_NameIsEmpty_ReturnsClassName(this.<#= Decapitalize(testObjectName) #>);
        }
        #endregion

<#+
}

private void WriteManyToManyTests(string unitUnderTestName, string relatedObjectName, string collectionOnTestedObjectPropertyName, string collectionOnRelatedObjectPropertyName)
{
#>
		#region <#= collectionOnTestedObjectPropertyName #> property
        [TestMethod]
        public void <#= collectionOnTestedObjectPropertyName #>Add_New<#= relatedObjectName #>_<#= unitUnderTestName #>Contains<#= relatedObjectName #>()
        {
            var <#= Decapitalize(relatedObjectName) #> = new <#= relatedObjectName #>() { Name = "<#= relatedObjectName #>" };
            ManyToManyCollectionHelper.CollectionAdd_NewItem_RelatedCollectionContainsThis(this.<#= Decapitalize(unitUnderTestName) #>, <#= Decapitalize(relatedObjectName) #>, this.<#= Decapitalize(unitUnderTestName) #>.<#= collectionOnTestedObjectPropertyName #>, <#= Decapitalize(relatedObjectName) #>.<#= collectionOnRelatedObjectPropertyName #>);
        }

        [TestMethod]
        public void <#= collectionOnTestedObjectPropertyName #>Insert_New<#= relatedObjectName #>_<#= unitUnderTestName #>Contains<#= relatedObjectName #>()
        {
            var <#= Decapitalize(relatedObjectName) #> = new <#= relatedObjectName #>() { Name = "<#= relatedObjectName #>" };
            ManyToManyCollectionHelper.CollectionInsert_NewItem_RelatedCollectionContainsThis(this.<#= Decapitalize(unitUnderTestName) #>, <#= Decapitalize(relatedObjectName) #>, this.<#= Decapitalize(unitUnderTestName) #>.<#= collectionOnTestedObjectPropertyName #>, <#= Decapitalize(relatedObjectName) #>.<#= collectionOnRelatedObjectPropertyName #>);
        }

        [TestMethod]
        public void <#= collectionOnTestedObjectPropertyName #>Clear_<#= relatedObjectName #>Contains<#= unitUnderTestName #>_<#= unitUnderTestName #>IsRemovedFrom<#= relatedObjectName #>()
        {
            var <#= Decapitalize(relatedObjectName) #> = new <#= relatedObjectName #>() { Name = "<#= relatedObjectName #>" };
            ManyToManyCollectionHelper.CollectionClear_TestedObjectCollectionContainsRelatedObject_TestedObjectIsRemovedFromRelatedCollection(this.<#= Decapitalize(unitUnderTestName) #>, <#= Decapitalize(relatedObjectName) #>, this.<#= Decapitalize(unitUnderTestName) #>.<#= collectionOnTestedObjectPropertyName #>, <#= Decapitalize(relatedObjectName) #>.<#= collectionOnRelatedObjectPropertyName #>);
        }

        [TestMethod]
        public void <#= collectionOnTestedObjectPropertyName #>Remove_<#= relatedObjectName #>Contains<#= unitUnderTestName #>_<#= unitUnderTestName #>IsRemovedFrom<#= relatedObjectName #>()
        {
            var <#= Decapitalize(relatedObjectName) #> = new <#= relatedObjectName #>() { Name = "<#= relatedObjectName #>" };
            ManyToManyCollectionHelper.CollectionRemove_TestedObjectCollectionContainsRelatedObject_TestedObjectIsRemovedFromRelatedCollection(this.<#= Decapitalize(unitUnderTestName) #>, <#= Decapitalize(relatedObjectName) #>, this.<#= Decapitalize(unitUnderTestName) #>.<#= collectionOnTestedObjectPropertyName #>, <#= Decapitalize(relatedObjectName) #>.<#= collectionOnRelatedObjectPropertyName #>);
        }

        [TestMethod]
        public void <#= collectionOnTestedObjectPropertyName #>RemoveAt_<#= relatedObjectName #>Contains<#= unitUnderTestName #>_<#= unitUnderTestName #>IsRemovedFrom<#= relatedObjectName #>()
        {
            var <#= Decapitalize(relatedObjectName) #> = new <#= relatedObjectName #>() { Name = "<#= relatedObjectName #>" };
            ManyToManyCollectionHelper.CollectionRemoveAt_TestedObjectCollectionContainsRelatedObject_TestedObjectIsRemovedFromRelatedCollection(this.<#= Decapitalize(unitUnderTestName) #>, <#= Decapitalize(relatedObjectName) #>, this.<#= Decapitalize(unitUnderTestName) #>.<#= collectionOnTestedObjectPropertyName #>, <#= Decapitalize(relatedObjectName) #>.<#= collectionOnRelatedObjectPropertyName #>);
        }

        [TestMethod]
        public void <#= collectionOnTestedObjectPropertyName #>Set_<#= relatedObjectName #>Contains<#= unitUnderTestName #>_<#= unitUnderTestName #>IsRemovedFromOld<#= relatedObjectName #>AndAddedToNew<#= relatedObjectName #>()
        {
            var <#= Decapitalize(relatedObjectName) #> = new <#= relatedObjectName #>() { Name = "<#= relatedObjectName #>" };
            var new<#= relatedObjectName #> = new <#= relatedObjectName #>() { Name = "New<#= relatedObjectName #>" };

            ManyToManyCollectionHelper.CollectionSet_TestedObjectCollectionContainsRelatedObject_TestedObjectIsReplacedInRelatedCollection(this.<#= Decapitalize(unitUnderTestName) #>, <#= Decapitalize(relatedObjectName) #>, new<#= relatedObjectName #>, this.<#= Decapitalize(unitUnderTestName) #>.<#= collectionOnTestedObjectPropertyName #>, <#= Decapitalize(relatedObjectName) #>.<#= collectionOnRelatedObjectPropertyName #>, new<#= relatedObjectName #>.<#= collectionOnRelatedObjectPropertyName #>);
        }
        #endregion	

<#+
}
#>